generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name            String
  email           String            @unique
  password        String
  birth           DateTime
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  isDeleted       Boolean           @default(false)
  id              String            @id @default(uuid())
  gender          Gender
  Account         Account[]
  Compare_corp    Compare_corp[]
  My_compare_corp My_compare_corp[]
  Option_count    Option_count[]
}

model Corp {
  id               String            @id @default(uuid())
  corp_name        String
  corp_tag         String
  corp_profile     String
  total_investment BigInt            @default(0)
  corp_sales       BigInt            @default(0)
  employee         Int
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  Account          Account[]
  Compare_corp     Compare_corp[]
  My_compare_corp  My_compare_corp[]
  Option_count     Option_count[]
}

model Option_count {
  id              String   @id @default(uuid())
  userId          String?
  corpId          String?
  my_compare_corp Int      @default(0)
  compare_corp    Int      @default(0)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  corp            Corp?    @relation(fields: [corpId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Compare_corp {
  id         String   @id @default(uuid())
  userId     String?
  corpId     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  corp       Corp?    @relation(fields: [corpId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model My_compare_corp {
  id         String   @id @default(uuid())
  userId     String?
  corpId     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  isDeleted  Boolean  @default(false)
  corp       Corp?    @relation(fields: [corpId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
}

model Investment {
  amount         Int
  amount_comment String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  isDeleted      Boolean  @default(false)
  accountId      String?
  id             String   @id @default(uuid())
  account        Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
}

model Account {
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  corpId     String?
  id         String       @id @default(uuid())
  userId     String?
  corp       Corp?        @relation(fields: [corpId], references: [id])
  user       User?        @relation(fields: [userId], references: [id])
  Investment Investment[]
}

enum Gender {
  M
  F
  N
}
