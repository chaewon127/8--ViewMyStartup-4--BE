
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Corp
 * 
 */
export type Corp = $Result.DefaultSelection<Prisma.$CorpPayload>
/**
 * Model Option_count
 * 
 */
export type Option_count = $Result.DefaultSelection<Prisma.$Option_countPayload>
/**
 * Model Compare_corp
 * 
 */
export type Compare_corp = $Result.DefaultSelection<Prisma.$Compare_corpPayload>
/**
 * Model My_compare_corp
 * 
 */
export type My_compare_corp = $Result.DefaultSelection<Prisma.$My_compare_corpPayload>
/**
 * Model Investment
 * 
 */
export type Investment = $Result.DefaultSelection<Prisma.$InvestmentPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  M: 'M',
  F: 'F',
  N: 'N'
};

export type Gender = (typeof Gender)[keyof typeof Gender]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.corp`: Exposes CRUD operations for the **Corp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Corps
    * const corps = await prisma.corp.findMany()
    * ```
    */
  get corp(): Prisma.CorpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.option_count`: Exposes CRUD operations for the **Option_count** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Option_counts
    * const option_counts = await prisma.option_count.findMany()
    * ```
    */
  get option_count(): Prisma.Option_countDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.compare_corp`: Exposes CRUD operations for the **Compare_corp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compare_corps
    * const compare_corps = await prisma.compare_corp.findMany()
    * ```
    */
  get compare_corp(): Prisma.Compare_corpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.my_compare_corp`: Exposes CRUD operations for the **My_compare_corp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more My_compare_corps
    * const my_compare_corps = await prisma.my_compare_corp.findMany()
    * ```
    */
  get my_compare_corp(): Prisma.My_compare_corpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.investment`: Exposes CRUD operations for the **Investment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investments
    * const investments = await prisma.investment.findMany()
    * ```
    */
  get investment(): Prisma.InvestmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Corp: 'Corp',
    Option_count: 'Option_count',
    Compare_corp: 'Compare_corp',
    My_compare_corp: 'My_compare_corp',
    Investment: 'Investment',
    Account: 'Account'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "corp" | "option_count" | "compare_corp" | "my_compare_corp" | "investment" | "account"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Corp: {
        payload: Prisma.$CorpPayload<ExtArgs>
        fields: Prisma.CorpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          findFirst: {
            args: Prisma.CorpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          findMany: {
            args: Prisma.CorpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>[]
          }
          create: {
            args: Prisma.CorpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          createMany: {
            args: Prisma.CorpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>[]
          }
          delete: {
            args: Prisma.CorpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          update: {
            args: Prisma.CorpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          deleteMany: {
            args: Prisma.CorpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CorpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>[]
          }
          upsert: {
            args: Prisma.CorpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CorpPayload>
          }
          aggregate: {
            args: Prisma.CorpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorp>
          }
          groupBy: {
            args: Prisma.CorpGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorpGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorpCountArgs<ExtArgs>
            result: $Utils.Optional<CorpCountAggregateOutputType> | number
          }
        }
      }
      Option_count: {
        payload: Prisma.$Option_countPayload<ExtArgs>
        fields: Prisma.Option_countFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Option_countFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Option_countFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          findFirst: {
            args: Prisma.Option_countFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Option_countFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          findMany: {
            args: Prisma.Option_countFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>[]
          }
          create: {
            args: Prisma.Option_countCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          createMany: {
            args: Prisma.Option_countCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Option_countCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>[]
          }
          delete: {
            args: Prisma.Option_countDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          update: {
            args: Prisma.Option_countUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          deleteMany: {
            args: Prisma.Option_countDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Option_countUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Option_countUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>[]
          }
          upsert: {
            args: Prisma.Option_countUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Option_countPayload>
          }
          aggregate: {
            args: Prisma.Option_countAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOption_count>
          }
          groupBy: {
            args: Prisma.Option_countGroupByArgs<ExtArgs>
            result: $Utils.Optional<Option_countGroupByOutputType>[]
          }
          count: {
            args: Prisma.Option_countCountArgs<ExtArgs>
            result: $Utils.Optional<Option_countCountAggregateOutputType> | number
          }
        }
      }
      Compare_corp: {
        payload: Prisma.$Compare_corpPayload<ExtArgs>
        fields: Prisma.Compare_corpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Compare_corpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Compare_corpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          findFirst: {
            args: Prisma.Compare_corpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Compare_corpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          findMany: {
            args: Prisma.Compare_corpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>[]
          }
          create: {
            args: Prisma.Compare_corpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          createMany: {
            args: Prisma.Compare_corpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.Compare_corpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>[]
          }
          delete: {
            args: Prisma.Compare_corpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          update: {
            args: Prisma.Compare_corpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          deleteMany: {
            args: Prisma.Compare_corpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Compare_corpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.Compare_corpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>[]
          }
          upsert: {
            args: Prisma.Compare_corpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Compare_corpPayload>
          }
          aggregate: {
            args: Prisma.Compare_corpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompare_corp>
          }
          groupBy: {
            args: Prisma.Compare_corpGroupByArgs<ExtArgs>
            result: $Utils.Optional<Compare_corpGroupByOutputType>[]
          }
          count: {
            args: Prisma.Compare_corpCountArgs<ExtArgs>
            result: $Utils.Optional<Compare_corpCountAggregateOutputType> | number
          }
        }
      }
      My_compare_corp: {
        payload: Prisma.$My_compare_corpPayload<ExtArgs>
        fields: Prisma.My_compare_corpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.My_compare_corpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.My_compare_corpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          findFirst: {
            args: Prisma.My_compare_corpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.My_compare_corpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          findMany: {
            args: Prisma.My_compare_corpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>[]
          }
          create: {
            args: Prisma.My_compare_corpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          createMany: {
            args: Prisma.My_compare_corpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.My_compare_corpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>[]
          }
          delete: {
            args: Prisma.My_compare_corpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          update: {
            args: Prisma.My_compare_corpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          deleteMany: {
            args: Prisma.My_compare_corpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.My_compare_corpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.My_compare_corpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>[]
          }
          upsert: {
            args: Prisma.My_compare_corpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$My_compare_corpPayload>
          }
          aggregate: {
            args: Prisma.My_compare_corpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMy_compare_corp>
          }
          groupBy: {
            args: Prisma.My_compare_corpGroupByArgs<ExtArgs>
            result: $Utils.Optional<My_compare_corpGroupByOutputType>[]
          }
          count: {
            args: Prisma.My_compare_corpCountArgs<ExtArgs>
            result: $Utils.Optional<My_compare_corpCountAggregateOutputType> | number
          }
        }
      }
      Investment: {
        payload: Prisma.$InvestmentPayload<ExtArgs>
        fields: Prisma.InvestmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvestmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvestmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          findFirst: {
            args: Prisma.InvestmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvestmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          findMany: {
            args: Prisma.InvestmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          create: {
            args: Prisma.InvestmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          createMany: {
            args: Prisma.InvestmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InvestmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          delete: {
            args: Prisma.InvestmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          update: {
            args: Prisma.InvestmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          deleteMany: {
            args: Prisma.InvestmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InvestmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InvestmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>[]
          }
          upsert: {
            args: Prisma.InvestmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvestmentPayload>
          }
          aggregate: {
            args: Prisma.InvestmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvestment>
          }
          groupBy: {
            args: Prisma.InvestmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<InvestmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InvestmentCountArgs<ExtArgs>
            result: $Utils.Optional<InvestmentCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    corp?: CorpOmit
    option_count?: Option_countOmit
    compare_corp?: Compare_corpOmit
    my_compare_corp?: My_compare_corpOmit
    investment?: InvestmentOmit
    account?: AccountOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    Account: number
    Compare_corp: number
    My_compare_corp: number
    Option_count: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Account?: boolean | UserCountOutputTypeCountAccountArgs
    Compare_corp?: boolean | UserCountOutputTypeCountCompare_corpArgs
    My_compare_corp?: boolean | UserCountOutputTypeCountMy_compare_corpArgs
    Option_count?: boolean | UserCountOutputTypeCountOption_countArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCompare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Compare_corpWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMy_compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: My_compare_corpWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOption_countArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Option_countWhereInput
  }


  /**
   * Count Type CorpCountOutputType
   */

  export type CorpCountOutputType = {
    Account: number
    Compare_corp: number
    My_compare_corp: number
    Option_count: number
  }

  export type CorpCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Account?: boolean | CorpCountOutputTypeCountAccountArgs
    Compare_corp?: boolean | CorpCountOutputTypeCountCompare_corpArgs
    My_compare_corp?: boolean | CorpCountOutputTypeCountMy_compare_corpArgs
    Option_count?: boolean | CorpCountOutputTypeCountOption_countArgs
  }

  // Custom InputTypes
  /**
   * CorpCountOutputType without action
   */
  export type CorpCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorpCountOutputType
     */
    select?: CorpCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CorpCountOutputType without action
   */
  export type CorpCountOutputTypeCountAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * CorpCountOutputType without action
   */
  export type CorpCountOutputTypeCountCompare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Compare_corpWhereInput
  }

  /**
   * CorpCountOutputType without action
   */
  export type CorpCountOutputTypeCountMy_compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: My_compare_corpWhereInput
  }

  /**
   * CorpCountOutputType without action
   */
  export type CorpCountOutputTypeCountOption_countArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Option_countWhereInput
  }


  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    Investment: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Investment?: boolean | AccountCountOutputTypeCountInvestmentArgs
  }

  // Custom InputTypes
  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountInvestmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    name: string | null
    email: string | null
    password: string | null
    birth: Date | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
    id: string | null
    gender: $Enums.Gender | null
  }

  export type UserMaxAggregateOutputType = {
    name: string | null
    email: string | null
    password: string | null
    birth: Date | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
    id: string | null
    gender: $Enums.Gender | null
  }

  export type UserCountAggregateOutputType = {
    name: number
    email: number
    password: number
    birth: number
    created_at: number
    updated_at: number
    isDeleted: number
    id: number
    gender: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    name?: true
    email?: true
    password?: true
    birth?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    id?: true
    gender?: true
  }

  export type UserMaxAggregateInputType = {
    name?: true
    email?: true
    password?: true
    birth?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    id?: true
    gender?: true
  }

  export type UserCountAggregateInputType = {
    name?: true
    email?: true
    password?: true
    birth?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    id?: true
    gender?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    name: string
    email: string
    password: string
    birth: Date
    created_at: Date
    updated_at: Date
    isDeleted: boolean
    id: string
    gender: $Enums.Gender
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    email?: boolean
    password?: boolean
    birth?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    id?: boolean
    gender?: boolean
    Account?: boolean | User$AccountArgs<ExtArgs>
    Compare_corp?: boolean | User$Compare_corpArgs<ExtArgs>
    My_compare_corp?: boolean | User$My_compare_corpArgs<ExtArgs>
    Option_count?: boolean | User$Option_countArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    email?: boolean
    password?: boolean
    birth?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    id?: boolean
    gender?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    email?: boolean
    password?: boolean
    birth?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    id?: boolean
    gender?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    name?: boolean
    email?: boolean
    password?: boolean
    birth?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    id?: boolean
    gender?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"name" | "email" | "password" | "birth" | "created_at" | "updated_at" | "isDeleted" | "id" | "gender", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Account?: boolean | User$AccountArgs<ExtArgs>
    Compare_corp?: boolean | User$Compare_corpArgs<ExtArgs>
    My_compare_corp?: boolean | User$My_compare_corpArgs<ExtArgs>
    Option_count?: boolean | User$Option_countArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      Account: Prisma.$AccountPayload<ExtArgs>[]
      Compare_corp: Prisma.$Compare_corpPayload<ExtArgs>[]
      My_compare_corp: Prisma.$My_compare_corpPayload<ExtArgs>[]
      Option_count: Prisma.$Option_countPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      email: string
      password: string
      birth: Date
      created_at: Date
      updated_at: Date
      isDeleted: boolean
      id: string
      gender: $Enums.Gender
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const userWithNameOnly = await prisma.user.findMany({ select: { name: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `name`
     * const userWithNameOnly = await prisma.user.createManyAndReturn({
     *   select: { name: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `name`
     * const userWithNameOnly = await prisma.user.updateManyAndReturn({
     *   select: { name: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Account<T extends User$AccountArgs<ExtArgs> = {}>(args?: Subset<T, User$AccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Compare_corp<T extends User$Compare_corpArgs<ExtArgs> = {}>(args?: Subset<T, User$Compare_corpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    My_compare_corp<T extends User$My_compare_corpArgs<ExtArgs> = {}>(args?: Subset<T, User$My_compare_corpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Option_count<T extends User$Option_countArgs<ExtArgs> = {}>(args?: Subset<T, User$Option_countArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly birth: FieldRef<"User", 'DateTime'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
    readonly isDeleted: FieldRef<"User", 'Boolean'>
    readonly id: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'Gender'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.Account
   */
  export type User$AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.Compare_corp
   */
  export type User$Compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    where?: Compare_corpWhereInput
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    cursor?: Compare_corpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Compare_corpScalarFieldEnum | Compare_corpScalarFieldEnum[]
  }

  /**
   * User.My_compare_corp
   */
  export type User$My_compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    where?: My_compare_corpWhereInput
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    cursor?: My_compare_corpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: My_compare_corpScalarFieldEnum | My_compare_corpScalarFieldEnum[]
  }

  /**
   * User.Option_count
   */
  export type User$Option_countArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    where?: Option_countWhereInput
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    cursor?: Option_countWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Option_countScalarFieldEnum | Option_countScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Corp
   */

  export type AggregateCorp = {
    _count: CorpCountAggregateOutputType | null
    _avg: CorpAvgAggregateOutputType | null
    _sum: CorpSumAggregateOutputType | null
    _min: CorpMinAggregateOutputType | null
    _max: CorpMaxAggregateOutputType | null
  }

  export type CorpAvgAggregateOutputType = {
    total_investment: number | null
    corp_sales: number | null
    employee: number | null
  }

  export type CorpSumAggregateOutputType = {
    total_investment: bigint | null
    corp_sales: bigint | null
    employee: number | null
  }

  export type CorpMinAggregateOutputType = {
    id: string | null
    corp_name: string | null
    corp_tag: string | null
    corp_profile: string | null
    total_investment: bigint | null
    corp_sales: bigint | null
    employee: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CorpMaxAggregateOutputType = {
    id: string | null
    corp_name: string | null
    corp_tag: string | null
    corp_profile: string | null
    total_investment: bigint | null
    corp_sales: bigint | null
    employee: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CorpCountAggregateOutputType = {
    id: number
    corp_name: number
    corp_tag: number
    corp_profile: number
    total_investment: number
    corp_sales: number
    employee: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CorpAvgAggregateInputType = {
    total_investment?: true
    corp_sales?: true
    employee?: true
  }

  export type CorpSumAggregateInputType = {
    total_investment?: true
    corp_sales?: true
    employee?: true
  }

  export type CorpMinAggregateInputType = {
    id?: true
    corp_name?: true
    corp_tag?: true
    corp_profile?: true
    total_investment?: true
    corp_sales?: true
    employee?: true
    created_at?: true
    updated_at?: true
  }

  export type CorpMaxAggregateInputType = {
    id?: true
    corp_name?: true
    corp_tag?: true
    corp_profile?: true
    total_investment?: true
    corp_sales?: true
    employee?: true
    created_at?: true
    updated_at?: true
  }

  export type CorpCountAggregateInputType = {
    id?: true
    corp_name?: true
    corp_tag?: true
    corp_profile?: true
    total_investment?: true
    corp_sales?: true
    employee?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CorpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corp to aggregate.
     */
    where?: CorpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corps to fetch.
     */
    orderBy?: CorpOrderByWithRelationInput | CorpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Corps
    **/
    _count?: true | CorpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorpMaxAggregateInputType
  }

  export type GetCorpAggregateType<T extends CorpAggregateArgs> = {
        [P in keyof T & keyof AggregateCorp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorp[P]>
      : GetScalarType<T[P], AggregateCorp[P]>
  }




  export type CorpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorpWhereInput
    orderBy?: CorpOrderByWithAggregationInput | CorpOrderByWithAggregationInput[]
    by: CorpScalarFieldEnum[] | CorpScalarFieldEnum
    having?: CorpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorpCountAggregateInputType | true
    _avg?: CorpAvgAggregateInputType
    _sum?: CorpSumAggregateInputType
    _min?: CorpMinAggregateInputType
    _max?: CorpMaxAggregateInputType
  }

  export type CorpGroupByOutputType = {
    id: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment: bigint
    corp_sales: bigint
    employee: number
    created_at: Date
    updated_at: Date
    _count: CorpCountAggregateOutputType | null
    _avg: CorpAvgAggregateOutputType | null
    _sum: CorpSumAggregateOutputType | null
    _min: CorpMinAggregateOutputType | null
    _max: CorpMaxAggregateOutputType | null
  }

  type GetCorpGroupByPayload<T extends CorpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorpGroupByOutputType[P]>
            : GetScalarType<T[P], CorpGroupByOutputType[P]>
        }
      >
    >


  export type CorpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corp_name?: boolean
    corp_tag?: boolean
    corp_profile?: boolean
    total_investment?: boolean
    corp_sales?: boolean
    employee?: boolean
    created_at?: boolean
    updated_at?: boolean
    Account?: boolean | Corp$AccountArgs<ExtArgs>
    Compare_corp?: boolean | Corp$Compare_corpArgs<ExtArgs>
    My_compare_corp?: boolean | Corp$My_compare_corpArgs<ExtArgs>
    Option_count?: boolean | Corp$Option_countArgs<ExtArgs>
    _count?: boolean | CorpCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corp"]>

  export type CorpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corp_name?: boolean
    corp_tag?: boolean
    corp_profile?: boolean
    total_investment?: boolean
    corp_sales?: boolean
    employee?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["corp"]>

  export type CorpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corp_name?: boolean
    corp_tag?: boolean
    corp_profile?: boolean
    total_investment?: boolean
    corp_sales?: boolean
    employee?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["corp"]>

  export type CorpSelectScalar = {
    id?: boolean
    corp_name?: boolean
    corp_tag?: boolean
    corp_profile?: boolean
    total_investment?: boolean
    corp_sales?: boolean
    employee?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CorpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "corp_name" | "corp_tag" | "corp_profile" | "total_investment" | "corp_sales" | "employee" | "created_at" | "updated_at", ExtArgs["result"]["corp"]>
  export type CorpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Account?: boolean | Corp$AccountArgs<ExtArgs>
    Compare_corp?: boolean | Corp$Compare_corpArgs<ExtArgs>
    My_compare_corp?: boolean | Corp$My_compare_corpArgs<ExtArgs>
    Option_count?: boolean | Corp$Option_countArgs<ExtArgs>
    _count?: boolean | CorpCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CorpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CorpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CorpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Corp"
    objects: {
      Account: Prisma.$AccountPayload<ExtArgs>[]
      Compare_corp: Prisma.$Compare_corpPayload<ExtArgs>[]
      My_compare_corp: Prisma.$My_compare_corpPayload<ExtArgs>[]
      Option_count: Prisma.$Option_countPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      corp_name: string
      corp_tag: string
      corp_profile: string
      total_investment: bigint
      corp_sales: bigint
      employee: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["corp"]>
    composites: {}
  }

  type CorpGetPayload<S extends boolean | null | undefined | CorpDefaultArgs> = $Result.GetResult<Prisma.$CorpPayload, S>

  type CorpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CorpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CorpCountAggregateInputType | true
    }

  export interface CorpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Corp'], meta: { name: 'Corp' } }
    /**
     * Find zero or one Corp that matches the filter.
     * @param {CorpFindUniqueArgs} args - Arguments to find a Corp
     * @example
     * // Get one Corp
     * const corp = await prisma.corp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorpFindUniqueArgs>(args: SelectSubset<T, CorpFindUniqueArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Corp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CorpFindUniqueOrThrowArgs} args - Arguments to find a Corp
     * @example
     * // Get one Corp
     * const corp = await prisma.corp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorpFindUniqueOrThrowArgs>(args: SelectSubset<T, CorpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpFindFirstArgs} args - Arguments to find a Corp
     * @example
     * // Get one Corp
     * const corp = await prisma.corp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorpFindFirstArgs>(args?: SelectSubset<T, CorpFindFirstArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Corp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpFindFirstOrThrowArgs} args - Arguments to find a Corp
     * @example
     * // Get one Corp
     * const corp = await prisma.corp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorpFindFirstOrThrowArgs>(args?: SelectSubset<T, CorpFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Corps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Corps
     * const corps = await prisma.corp.findMany()
     * 
     * // Get first 10 Corps
     * const corps = await prisma.corp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corpWithIdOnly = await prisma.corp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorpFindManyArgs>(args?: SelectSubset<T, CorpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Corp.
     * @param {CorpCreateArgs} args - Arguments to create a Corp.
     * @example
     * // Create one Corp
     * const Corp = await prisma.corp.create({
     *   data: {
     *     // ... data to create a Corp
     *   }
     * })
     * 
     */
    create<T extends CorpCreateArgs>(args: SelectSubset<T, CorpCreateArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Corps.
     * @param {CorpCreateManyArgs} args - Arguments to create many Corps.
     * @example
     * // Create many Corps
     * const corp = await prisma.corp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorpCreateManyArgs>(args?: SelectSubset<T, CorpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Corps and returns the data saved in the database.
     * @param {CorpCreateManyAndReturnArgs} args - Arguments to create many Corps.
     * @example
     * // Create many Corps
     * const corp = await prisma.corp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Corps and only return the `id`
     * const corpWithIdOnly = await prisma.corp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorpCreateManyAndReturnArgs>(args?: SelectSubset<T, CorpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Corp.
     * @param {CorpDeleteArgs} args - Arguments to delete one Corp.
     * @example
     * // Delete one Corp
     * const Corp = await prisma.corp.delete({
     *   where: {
     *     // ... filter to delete one Corp
     *   }
     * })
     * 
     */
    delete<T extends CorpDeleteArgs>(args: SelectSubset<T, CorpDeleteArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Corp.
     * @param {CorpUpdateArgs} args - Arguments to update one Corp.
     * @example
     * // Update one Corp
     * const corp = await prisma.corp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorpUpdateArgs>(args: SelectSubset<T, CorpUpdateArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Corps.
     * @param {CorpDeleteManyArgs} args - Arguments to filter Corps to delete.
     * @example
     * // Delete a few Corps
     * const { count } = await prisma.corp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorpDeleteManyArgs>(args?: SelectSubset<T, CorpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Corps
     * const corp = await prisma.corp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorpUpdateManyArgs>(args: SelectSubset<T, CorpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Corps and returns the data updated in the database.
     * @param {CorpUpdateManyAndReturnArgs} args - Arguments to update many Corps.
     * @example
     * // Update many Corps
     * const corp = await prisma.corp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Corps and only return the `id`
     * const corpWithIdOnly = await prisma.corp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CorpUpdateManyAndReturnArgs>(args: SelectSubset<T, CorpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Corp.
     * @param {CorpUpsertArgs} args - Arguments to update or create a Corp.
     * @example
     * // Update or create a Corp
     * const corp = await prisma.corp.upsert({
     *   create: {
     *     // ... data to create a Corp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Corp we want to update
     *   }
     * })
     */
    upsert<T extends CorpUpsertArgs>(args: SelectSubset<T, CorpUpsertArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpCountArgs} args - Arguments to filter Corps to count.
     * @example
     * // Count the number of Corps
     * const count = await prisma.corp.count({
     *   where: {
     *     // ... the filter for the Corps we want to count
     *   }
     * })
    **/
    count<T extends CorpCountArgs>(
      args?: Subset<T, CorpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorpAggregateArgs>(args: Subset<T, CorpAggregateArgs>): Prisma.PrismaPromise<GetCorpAggregateType<T>>

    /**
     * Group by Corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorpGroupByArgs['orderBy'] }
        : { orderBy?: CorpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Corp model
   */
  readonly fields: CorpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Corp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Account<T extends Corp$AccountArgs<ExtArgs> = {}>(args?: Subset<T, Corp$AccountArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Compare_corp<T extends Corp$Compare_corpArgs<ExtArgs> = {}>(args?: Subset<T, Corp$Compare_corpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    My_compare_corp<T extends Corp$My_compare_corpArgs<ExtArgs> = {}>(args?: Subset<T, Corp$My_compare_corpArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Option_count<T extends Corp$Option_countArgs<ExtArgs> = {}>(args?: Subset<T, Corp$Option_countArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Corp model
   */
  interface CorpFieldRefs {
    readonly id: FieldRef<"Corp", 'String'>
    readonly corp_name: FieldRef<"Corp", 'String'>
    readonly corp_tag: FieldRef<"Corp", 'String'>
    readonly corp_profile: FieldRef<"Corp", 'String'>
    readonly total_investment: FieldRef<"Corp", 'BigInt'>
    readonly corp_sales: FieldRef<"Corp", 'BigInt'>
    readonly employee: FieldRef<"Corp", 'Int'>
    readonly created_at: FieldRef<"Corp", 'DateTime'>
    readonly updated_at: FieldRef<"Corp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Corp findUnique
   */
  export type CorpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter, which Corp to fetch.
     */
    where: CorpWhereUniqueInput
  }

  /**
   * Corp findUniqueOrThrow
   */
  export type CorpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter, which Corp to fetch.
     */
    where: CorpWhereUniqueInput
  }

  /**
   * Corp findFirst
   */
  export type CorpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter, which Corp to fetch.
     */
    where?: CorpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corps to fetch.
     */
    orderBy?: CorpOrderByWithRelationInput | CorpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corps.
     */
    cursor?: CorpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corps.
     */
    distinct?: CorpScalarFieldEnum | CorpScalarFieldEnum[]
  }

  /**
   * Corp findFirstOrThrow
   */
  export type CorpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter, which Corp to fetch.
     */
    where?: CorpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corps to fetch.
     */
    orderBy?: CorpOrderByWithRelationInput | CorpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Corps.
     */
    cursor?: CorpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Corps.
     */
    distinct?: CorpScalarFieldEnum | CorpScalarFieldEnum[]
  }

  /**
   * Corp findMany
   */
  export type CorpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter, which Corps to fetch.
     */
    where?: CorpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Corps to fetch.
     */
    orderBy?: CorpOrderByWithRelationInput | CorpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Corps.
     */
    cursor?: CorpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Corps.
     */
    skip?: number
    distinct?: CorpScalarFieldEnum | CorpScalarFieldEnum[]
  }

  /**
   * Corp create
   */
  export type CorpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * The data needed to create a Corp.
     */
    data: XOR<CorpCreateInput, CorpUncheckedCreateInput>
  }

  /**
   * Corp createMany
   */
  export type CorpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Corps.
     */
    data: CorpCreateManyInput | CorpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Corp createManyAndReturn
   */
  export type CorpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * The data used to create many Corps.
     */
    data: CorpCreateManyInput | CorpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Corp update
   */
  export type CorpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * The data needed to update a Corp.
     */
    data: XOR<CorpUpdateInput, CorpUncheckedUpdateInput>
    /**
     * Choose, which Corp to update.
     */
    where: CorpWhereUniqueInput
  }

  /**
   * Corp updateMany
   */
  export type CorpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Corps.
     */
    data: XOR<CorpUpdateManyMutationInput, CorpUncheckedUpdateManyInput>
    /**
     * Filter which Corps to update
     */
    where?: CorpWhereInput
    /**
     * Limit how many Corps to update.
     */
    limit?: number
  }

  /**
   * Corp updateManyAndReturn
   */
  export type CorpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * The data used to update Corps.
     */
    data: XOR<CorpUpdateManyMutationInput, CorpUncheckedUpdateManyInput>
    /**
     * Filter which Corps to update
     */
    where?: CorpWhereInput
    /**
     * Limit how many Corps to update.
     */
    limit?: number
  }

  /**
   * Corp upsert
   */
  export type CorpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * The filter to search for the Corp to update in case it exists.
     */
    where: CorpWhereUniqueInput
    /**
     * In case the Corp found by the `where` argument doesn't exist, create a new Corp with this data.
     */
    create: XOR<CorpCreateInput, CorpUncheckedCreateInput>
    /**
     * In case the Corp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorpUpdateInput, CorpUncheckedUpdateInput>
  }

  /**
   * Corp delete
   */
  export type CorpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    /**
     * Filter which Corp to delete.
     */
    where: CorpWhereUniqueInput
  }

  /**
   * Corp deleteMany
   */
  export type CorpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corps to delete
     */
    where?: CorpWhereInput
    /**
     * Limit how many Corps to delete.
     */
    limit?: number
  }

  /**
   * Corp.Account
   */
  export type Corp$AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Corp.Compare_corp
   */
  export type Corp$Compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    where?: Compare_corpWhereInput
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    cursor?: Compare_corpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Compare_corpScalarFieldEnum | Compare_corpScalarFieldEnum[]
  }

  /**
   * Corp.My_compare_corp
   */
  export type Corp$My_compare_corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    where?: My_compare_corpWhereInput
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    cursor?: My_compare_corpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: My_compare_corpScalarFieldEnum | My_compare_corpScalarFieldEnum[]
  }

  /**
   * Corp.Option_count
   */
  export type Corp$Option_countArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    where?: Option_countWhereInput
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    cursor?: Option_countWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Option_countScalarFieldEnum | Option_countScalarFieldEnum[]
  }

  /**
   * Corp without action
   */
  export type CorpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
  }


  /**
   * Model Option_count
   */

  export type AggregateOption_count = {
    _count: Option_countCountAggregateOutputType | null
    _avg: Option_countAvgAggregateOutputType | null
    _sum: Option_countSumAggregateOutputType | null
    _min: Option_countMinAggregateOutputType | null
    _max: Option_countMaxAggregateOutputType | null
  }

  export type Option_countAvgAggregateOutputType = {
    my_compare_corp: number | null
    compare_corp: number | null
  }

  export type Option_countSumAggregateOutputType = {
    my_compare_corp: number | null
    compare_corp: number | null
  }

  export type Option_countMinAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    my_compare_corp: number | null
    compare_corp: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Option_countMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    my_compare_corp: number | null
    compare_corp: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Option_countCountAggregateOutputType = {
    id: number
    userId: number
    corpId: number
    my_compare_corp: number
    compare_corp: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Option_countAvgAggregateInputType = {
    my_compare_corp?: true
    compare_corp?: true
  }

  export type Option_countSumAggregateInputType = {
    my_compare_corp?: true
    compare_corp?: true
  }

  export type Option_countMinAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    my_compare_corp?: true
    compare_corp?: true
    created_at?: true
    updated_at?: true
  }

  export type Option_countMaxAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    my_compare_corp?: true
    compare_corp?: true
    created_at?: true
    updated_at?: true
  }

  export type Option_countCountAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    my_compare_corp?: true
    compare_corp?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Option_countAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Option_count to aggregate.
     */
    where?: Option_countWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Option_counts to fetch.
     */
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Option_countWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Option_counts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Option_counts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Option_counts
    **/
    _count?: true | Option_countCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Option_countAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Option_countSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Option_countMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Option_countMaxAggregateInputType
  }

  export type GetOption_countAggregateType<T extends Option_countAggregateArgs> = {
        [P in keyof T & keyof AggregateOption_count]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOption_count[P]>
      : GetScalarType<T[P], AggregateOption_count[P]>
  }




  export type Option_countGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Option_countWhereInput
    orderBy?: Option_countOrderByWithAggregationInput | Option_countOrderByWithAggregationInput[]
    by: Option_countScalarFieldEnum[] | Option_countScalarFieldEnum
    having?: Option_countScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Option_countCountAggregateInputType | true
    _avg?: Option_countAvgAggregateInputType
    _sum?: Option_countSumAggregateInputType
    _min?: Option_countMinAggregateInputType
    _max?: Option_countMaxAggregateInputType
  }

  export type Option_countGroupByOutputType = {
    id: string
    userId: string | null
    corpId: string | null
    my_compare_corp: number
    compare_corp: number
    created_at: Date
    updated_at: Date
    _count: Option_countCountAggregateOutputType | null
    _avg: Option_countAvgAggregateOutputType | null
    _sum: Option_countSumAggregateOutputType | null
    _min: Option_countMinAggregateOutputType | null
    _max: Option_countMaxAggregateOutputType | null
  }

  type GetOption_countGroupByPayload<T extends Option_countGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Option_countGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Option_countGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Option_countGroupByOutputType[P]>
            : GetScalarType<T[P], Option_countGroupByOutputType[P]>
        }
      >
    >


  export type Option_countSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    my_compare_corp?: boolean
    compare_corp?: boolean
    created_at?: boolean
    updated_at?: boolean
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }, ExtArgs["result"]["option_count"]>

  export type Option_countSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    my_compare_corp?: boolean
    compare_corp?: boolean
    created_at?: boolean
    updated_at?: boolean
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }, ExtArgs["result"]["option_count"]>

  export type Option_countSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    my_compare_corp?: boolean
    compare_corp?: boolean
    created_at?: boolean
    updated_at?: boolean
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }, ExtArgs["result"]["option_count"]>

  export type Option_countSelectScalar = {
    id?: boolean
    userId?: boolean
    corpId?: boolean
    my_compare_corp?: boolean
    compare_corp?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type Option_countOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "corpId" | "my_compare_corp" | "compare_corp" | "created_at" | "updated_at", ExtArgs["result"]["option_count"]>
  export type Option_countInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }
  export type Option_countIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }
  export type Option_countIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Option_count$corpArgs<ExtArgs>
    user?: boolean | Option_count$userArgs<ExtArgs>
  }

  export type $Option_countPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Option_count"
    objects: {
      corp: Prisma.$CorpPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      corpId: string | null
      my_compare_corp: number
      compare_corp: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["option_count"]>
    composites: {}
  }

  type Option_countGetPayload<S extends boolean | null | undefined | Option_countDefaultArgs> = $Result.GetResult<Prisma.$Option_countPayload, S>

  type Option_countCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Option_countFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Option_countCountAggregateInputType | true
    }

  export interface Option_countDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Option_count'], meta: { name: 'Option_count' } }
    /**
     * Find zero or one Option_count that matches the filter.
     * @param {Option_countFindUniqueArgs} args - Arguments to find a Option_count
     * @example
     * // Get one Option_count
     * const option_count = await prisma.option_count.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Option_countFindUniqueArgs>(args: SelectSubset<T, Option_countFindUniqueArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Option_count that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Option_countFindUniqueOrThrowArgs} args - Arguments to find a Option_count
     * @example
     * // Get one Option_count
     * const option_count = await prisma.option_count.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Option_countFindUniqueOrThrowArgs>(args: SelectSubset<T, Option_countFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option_count that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countFindFirstArgs} args - Arguments to find a Option_count
     * @example
     * // Get one Option_count
     * const option_count = await prisma.option_count.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Option_countFindFirstArgs>(args?: SelectSubset<T, Option_countFindFirstArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Option_count that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countFindFirstOrThrowArgs} args - Arguments to find a Option_count
     * @example
     * // Get one Option_count
     * const option_count = await prisma.option_count.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Option_countFindFirstOrThrowArgs>(args?: SelectSubset<T, Option_countFindFirstOrThrowArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Option_counts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Option_counts
     * const option_counts = await prisma.option_count.findMany()
     * 
     * // Get first 10 Option_counts
     * const option_counts = await prisma.option_count.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const option_countWithIdOnly = await prisma.option_count.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Option_countFindManyArgs>(args?: SelectSubset<T, Option_countFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Option_count.
     * @param {Option_countCreateArgs} args - Arguments to create a Option_count.
     * @example
     * // Create one Option_count
     * const Option_count = await prisma.option_count.create({
     *   data: {
     *     // ... data to create a Option_count
     *   }
     * })
     * 
     */
    create<T extends Option_countCreateArgs>(args: SelectSubset<T, Option_countCreateArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Option_counts.
     * @param {Option_countCreateManyArgs} args - Arguments to create many Option_counts.
     * @example
     * // Create many Option_counts
     * const option_count = await prisma.option_count.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Option_countCreateManyArgs>(args?: SelectSubset<T, Option_countCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Option_counts and returns the data saved in the database.
     * @param {Option_countCreateManyAndReturnArgs} args - Arguments to create many Option_counts.
     * @example
     * // Create many Option_counts
     * const option_count = await prisma.option_count.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Option_counts and only return the `id`
     * const option_countWithIdOnly = await prisma.option_count.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Option_countCreateManyAndReturnArgs>(args?: SelectSubset<T, Option_countCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Option_count.
     * @param {Option_countDeleteArgs} args - Arguments to delete one Option_count.
     * @example
     * // Delete one Option_count
     * const Option_count = await prisma.option_count.delete({
     *   where: {
     *     // ... filter to delete one Option_count
     *   }
     * })
     * 
     */
    delete<T extends Option_countDeleteArgs>(args: SelectSubset<T, Option_countDeleteArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Option_count.
     * @param {Option_countUpdateArgs} args - Arguments to update one Option_count.
     * @example
     * // Update one Option_count
     * const option_count = await prisma.option_count.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Option_countUpdateArgs>(args: SelectSubset<T, Option_countUpdateArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Option_counts.
     * @param {Option_countDeleteManyArgs} args - Arguments to filter Option_counts to delete.
     * @example
     * // Delete a few Option_counts
     * const { count } = await prisma.option_count.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Option_countDeleteManyArgs>(args?: SelectSubset<T, Option_countDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Option_counts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Option_counts
     * const option_count = await prisma.option_count.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Option_countUpdateManyArgs>(args: SelectSubset<T, Option_countUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Option_counts and returns the data updated in the database.
     * @param {Option_countUpdateManyAndReturnArgs} args - Arguments to update many Option_counts.
     * @example
     * // Update many Option_counts
     * const option_count = await prisma.option_count.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Option_counts and only return the `id`
     * const option_countWithIdOnly = await prisma.option_count.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Option_countUpdateManyAndReturnArgs>(args: SelectSubset<T, Option_countUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Option_count.
     * @param {Option_countUpsertArgs} args - Arguments to update or create a Option_count.
     * @example
     * // Update or create a Option_count
     * const option_count = await prisma.option_count.upsert({
     *   create: {
     *     // ... data to create a Option_count
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Option_count we want to update
     *   }
     * })
     */
    upsert<T extends Option_countUpsertArgs>(args: SelectSubset<T, Option_countUpsertArgs<ExtArgs>>): Prisma__Option_countClient<$Result.GetResult<Prisma.$Option_countPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Option_counts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countCountArgs} args - Arguments to filter Option_counts to count.
     * @example
     * // Count the number of Option_counts
     * const count = await prisma.option_count.count({
     *   where: {
     *     // ... the filter for the Option_counts we want to count
     *   }
     * })
    **/
    count<T extends Option_countCountArgs>(
      args?: Subset<T, Option_countCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Option_countCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Option_count.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Option_countAggregateArgs>(args: Subset<T, Option_countAggregateArgs>): Prisma.PrismaPromise<GetOption_countAggregateType<T>>

    /**
     * Group by Option_count.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Option_countGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Option_countGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Option_countGroupByArgs['orderBy'] }
        : { orderBy?: Option_countGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Option_countGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOption_countGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Option_count model
   */
  readonly fields: Option_countFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Option_count.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Option_countClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corp<T extends Option_count$corpArgs<ExtArgs> = {}>(args?: Subset<T, Option_count$corpArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends Option_count$userArgs<ExtArgs> = {}>(args?: Subset<T, Option_count$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Option_count model
   */
  interface Option_countFieldRefs {
    readonly id: FieldRef<"Option_count", 'String'>
    readonly userId: FieldRef<"Option_count", 'String'>
    readonly corpId: FieldRef<"Option_count", 'String'>
    readonly my_compare_corp: FieldRef<"Option_count", 'Int'>
    readonly compare_corp: FieldRef<"Option_count", 'Int'>
    readonly created_at: FieldRef<"Option_count", 'DateTime'>
    readonly updated_at: FieldRef<"Option_count", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Option_count findUnique
   */
  export type Option_countFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter, which Option_count to fetch.
     */
    where: Option_countWhereUniqueInput
  }

  /**
   * Option_count findUniqueOrThrow
   */
  export type Option_countFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter, which Option_count to fetch.
     */
    where: Option_countWhereUniqueInput
  }

  /**
   * Option_count findFirst
   */
  export type Option_countFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter, which Option_count to fetch.
     */
    where?: Option_countWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Option_counts to fetch.
     */
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Option_counts.
     */
    cursor?: Option_countWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Option_counts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Option_counts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Option_counts.
     */
    distinct?: Option_countScalarFieldEnum | Option_countScalarFieldEnum[]
  }

  /**
   * Option_count findFirstOrThrow
   */
  export type Option_countFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter, which Option_count to fetch.
     */
    where?: Option_countWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Option_counts to fetch.
     */
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Option_counts.
     */
    cursor?: Option_countWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Option_counts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Option_counts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Option_counts.
     */
    distinct?: Option_countScalarFieldEnum | Option_countScalarFieldEnum[]
  }

  /**
   * Option_count findMany
   */
  export type Option_countFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter, which Option_counts to fetch.
     */
    where?: Option_countWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Option_counts to fetch.
     */
    orderBy?: Option_countOrderByWithRelationInput | Option_countOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Option_counts.
     */
    cursor?: Option_countWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Option_counts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Option_counts.
     */
    skip?: number
    distinct?: Option_countScalarFieldEnum | Option_countScalarFieldEnum[]
  }

  /**
   * Option_count create
   */
  export type Option_countCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * The data needed to create a Option_count.
     */
    data: XOR<Option_countCreateInput, Option_countUncheckedCreateInput>
  }

  /**
   * Option_count createMany
   */
  export type Option_countCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Option_counts.
     */
    data: Option_countCreateManyInput | Option_countCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Option_count createManyAndReturn
   */
  export type Option_countCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * The data used to create many Option_counts.
     */
    data: Option_countCreateManyInput | Option_countCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Option_count update
   */
  export type Option_countUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * The data needed to update a Option_count.
     */
    data: XOR<Option_countUpdateInput, Option_countUncheckedUpdateInput>
    /**
     * Choose, which Option_count to update.
     */
    where: Option_countWhereUniqueInput
  }

  /**
   * Option_count updateMany
   */
  export type Option_countUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Option_counts.
     */
    data: XOR<Option_countUpdateManyMutationInput, Option_countUncheckedUpdateManyInput>
    /**
     * Filter which Option_counts to update
     */
    where?: Option_countWhereInput
    /**
     * Limit how many Option_counts to update.
     */
    limit?: number
  }

  /**
   * Option_count updateManyAndReturn
   */
  export type Option_countUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * The data used to update Option_counts.
     */
    data: XOR<Option_countUpdateManyMutationInput, Option_countUncheckedUpdateManyInput>
    /**
     * Filter which Option_counts to update
     */
    where?: Option_countWhereInput
    /**
     * Limit how many Option_counts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Option_count upsert
   */
  export type Option_countUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * The filter to search for the Option_count to update in case it exists.
     */
    where: Option_countWhereUniqueInput
    /**
     * In case the Option_count found by the `where` argument doesn't exist, create a new Option_count with this data.
     */
    create: XOR<Option_countCreateInput, Option_countUncheckedCreateInput>
    /**
     * In case the Option_count was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Option_countUpdateInput, Option_countUncheckedUpdateInput>
  }

  /**
   * Option_count delete
   */
  export type Option_countDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
    /**
     * Filter which Option_count to delete.
     */
    where: Option_countWhereUniqueInput
  }

  /**
   * Option_count deleteMany
   */
  export type Option_countDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Option_counts to delete
     */
    where?: Option_countWhereInput
    /**
     * Limit how many Option_counts to delete.
     */
    limit?: number
  }

  /**
   * Option_count.corp
   */
  export type Option_count$corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    where?: CorpWhereInput
  }

  /**
   * Option_count.user
   */
  export type Option_count$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Option_count without action
   */
  export type Option_countDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Option_count
     */
    select?: Option_countSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Option_count
     */
    omit?: Option_countOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Option_countInclude<ExtArgs> | null
  }


  /**
   * Model Compare_corp
   */

  export type AggregateCompare_corp = {
    _count: Compare_corpCountAggregateOutputType | null
    _min: Compare_corpMinAggregateOutputType | null
    _max: Compare_corpMaxAggregateOutputType | null
  }

  export type Compare_corpMinAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
  }

  export type Compare_corpMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
  }

  export type Compare_corpCountAggregateOutputType = {
    id: number
    userId: number
    corpId: number
    created_at: number
    updated_at: number
    isDeleted: number
    _all: number
  }


  export type Compare_corpMinAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
  }

  export type Compare_corpMaxAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
  }

  export type Compare_corpCountAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    _all?: true
  }

  export type Compare_corpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compare_corp to aggregate.
     */
    where?: Compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compare_corps to fetch.
     */
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compare_corps
    **/
    _count?: true | Compare_corpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Compare_corpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Compare_corpMaxAggregateInputType
  }

  export type GetCompare_corpAggregateType<T extends Compare_corpAggregateArgs> = {
        [P in keyof T & keyof AggregateCompare_corp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompare_corp[P]>
      : GetScalarType<T[P], AggregateCompare_corp[P]>
  }




  export type Compare_corpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Compare_corpWhereInput
    orderBy?: Compare_corpOrderByWithAggregationInput | Compare_corpOrderByWithAggregationInput[]
    by: Compare_corpScalarFieldEnum[] | Compare_corpScalarFieldEnum
    having?: Compare_corpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Compare_corpCountAggregateInputType | true
    _min?: Compare_corpMinAggregateInputType
    _max?: Compare_corpMaxAggregateInputType
  }

  export type Compare_corpGroupByOutputType = {
    id: string
    userId: string | null
    corpId: string | null
    created_at: Date
    updated_at: Date
    isDeleted: boolean
    _count: Compare_corpCountAggregateOutputType | null
    _min: Compare_corpMinAggregateOutputType | null
    _max: Compare_corpMaxAggregateOutputType | null
  }

  type GetCompare_corpGroupByPayload<T extends Compare_corpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Compare_corpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Compare_corpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Compare_corpGroupByOutputType[P]>
            : GetScalarType<T[P], Compare_corpGroupByOutputType[P]>
        }
      >
    >


  export type Compare_corpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["compare_corp"]>

  export type Compare_corpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["compare_corp"]>

  export type Compare_corpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["compare_corp"]>

  export type Compare_corpSelectScalar = {
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
  }

  export type Compare_corpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "corpId" | "created_at" | "updated_at" | "isDeleted", ExtArgs["result"]["compare_corp"]>
  export type Compare_corpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }
  export type Compare_corpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }
  export type Compare_corpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Compare_corp$corpArgs<ExtArgs>
    user?: boolean | Compare_corp$userArgs<ExtArgs>
  }

  export type $Compare_corpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Compare_corp"
    objects: {
      corp: Prisma.$CorpPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      corpId: string | null
      created_at: Date
      updated_at: Date
      isDeleted: boolean
    }, ExtArgs["result"]["compare_corp"]>
    composites: {}
  }

  type Compare_corpGetPayload<S extends boolean | null | undefined | Compare_corpDefaultArgs> = $Result.GetResult<Prisma.$Compare_corpPayload, S>

  type Compare_corpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Compare_corpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Compare_corpCountAggregateInputType | true
    }

  export interface Compare_corpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Compare_corp'], meta: { name: 'Compare_corp' } }
    /**
     * Find zero or one Compare_corp that matches the filter.
     * @param {Compare_corpFindUniqueArgs} args - Arguments to find a Compare_corp
     * @example
     * // Get one Compare_corp
     * const compare_corp = await prisma.compare_corp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Compare_corpFindUniqueArgs>(args: SelectSubset<T, Compare_corpFindUniqueArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Compare_corp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Compare_corpFindUniqueOrThrowArgs} args - Arguments to find a Compare_corp
     * @example
     * // Get one Compare_corp
     * const compare_corp = await prisma.compare_corp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Compare_corpFindUniqueOrThrowArgs>(args: SelectSubset<T, Compare_corpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compare_corp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpFindFirstArgs} args - Arguments to find a Compare_corp
     * @example
     * // Get one Compare_corp
     * const compare_corp = await prisma.compare_corp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Compare_corpFindFirstArgs>(args?: SelectSubset<T, Compare_corpFindFirstArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Compare_corp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpFindFirstOrThrowArgs} args - Arguments to find a Compare_corp
     * @example
     * // Get one Compare_corp
     * const compare_corp = await prisma.compare_corp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Compare_corpFindFirstOrThrowArgs>(args?: SelectSubset<T, Compare_corpFindFirstOrThrowArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Compare_corps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compare_corps
     * const compare_corps = await prisma.compare_corp.findMany()
     * 
     * // Get first 10 Compare_corps
     * const compare_corps = await prisma.compare_corp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compare_corpWithIdOnly = await prisma.compare_corp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Compare_corpFindManyArgs>(args?: SelectSubset<T, Compare_corpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Compare_corp.
     * @param {Compare_corpCreateArgs} args - Arguments to create a Compare_corp.
     * @example
     * // Create one Compare_corp
     * const Compare_corp = await prisma.compare_corp.create({
     *   data: {
     *     // ... data to create a Compare_corp
     *   }
     * })
     * 
     */
    create<T extends Compare_corpCreateArgs>(args: SelectSubset<T, Compare_corpCreateArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Compare_corps.
     * @param {Compare_corpCreateManyArgs} args - Arguments to create many Compare_corps.
     * @example
     * // Create many Compare_corps
     * const compare_corp = await prisma.compare_corp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Compare_corpCreateManyArgs>(args?: SelectSubset<T, Compare_corpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Compare_corps and returns the data saved in the database.
     * @param {Compare_corpCreateManyAndReturnArgs} args - Arguments to create many Compare_corps.
     * @example
     * // Create many Compare_corps
     * const compare_corp = await prisma.compare_corp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Compare_corps and only return the `id`
     * const compare_corpWithIdOnly = await prisma.compare_corp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends Compare_corpCreateManyAndReturnArgs>(args?: SelectSubset<T, Compare_corpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Compare_corp.
     * @param {Compare_corpDeleteArgs} args - Arguments to delete one Compare_corp.
     * @example
     * // Delete one Compare_corp
     * const Compare_corp = await prisma.compare_corp.delete({
     *   where: {
     *     // ... filter to delete one Compare_corp
     *   }
     * })
     * 
     */
    delete<T extends Compare_corpDeleteArgs>(args: SelectSubset<T, Compare_corpDeleteArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Compare_corp.
     * @param {Compare_corpUpdateArgs} args - Arguments to update one Compare_corp.
     * @example
     * // Update one Compare_corp
     * const compare_corp = await prisma.compare_corp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Compare_corpUpdateArgs>(args: SelectSubset<T, Compare_corpUpdateArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Compare_corps.
     * @param {Compare_corpDeleteManyArgs} args - Arguments to filter Compare_corps to delete.
     * @example
     * // Delete a few Compare_corps
     * const { count } = await prisma.compare_corp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Compare_corpDeleteManyArgs>(args?: SelectSubset<T, Compare_corpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compare_corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compare_corps
     * const compare_corp = await prisma.compare_corp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Compare_corpUpdateManyArgs>(args: SelectSubset<T, Compare_corpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compare_corps and returns the data updated in the database.
     * @param {Compare_corpUpdateManyAndReturnArgs} args - Arguments to update many Compare_corps.
     * @example
     * // Update many Compare_corps
     * const compare_corp = await prisma.compare_corp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Compare_corps and only return the `id`
     * const compare_corpWithIdOnly = await prisma.compare_corp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends Compare_corpUpdateManyAndReturnArgs>(args: SelectSubset<T, Compare_corpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Compare_corp.
     * @param {Compare_corpUpsertArgs} args - Arguments to update or create a Compare_corp.
     * @example
     * // Update or create a Compare_corp
     * const compare_corp = await prisma.compare_corp.upsert({
     *   create: {
     *     // ... data to create a Compare_corp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compare_corp we want to update
     *   }
     * })
     */
    upsert<T extends Compare_corpUpsertArgs>(args: SelectSubset<T, Compare_corpUpsertArgs<ExtArgs>>): Prisma__Compare_corpClient<$Result.GetResult<Prisma.$Compare_corpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Compare_corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpCountArgs} args - Arguments to filter Compare_corps to count.
     * @example
     * // Count the number of Compare_corps
     * const count = await prisma.compare_corp.count({
     *   where: {
     *     // ... the filter for the Compare_corps we want to count
     *   }
     * })
    **/
    count<T extends Compare_corpCountArgs>(
      args?: Subset<T, Compare_corpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Compare_corpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compare_corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Compare_corpAggregateArgs>(args: Subset<T, Compare_corpAggregateArgs>): Prisma.PrismaPromise<GetCompare_corpAggregateType<T>>

    /**
     * Group by Compare_corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Compare_corpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Compare_corpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Compare_corpGroupByArgs['orderBy'] }
        : { orderBy?: Compare_corpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Compare_corpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompare_corpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Compare_corp model
   */
  readonly fields: Compare_corpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Compare_corp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Compare_corpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corp<T extends Compare_corp$corpArgs<ExtArgs> = {}>(args?: Subset<T, Compare_corp$corpArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends Compare_corp$userArgs<ExtArgs> = {}>(args?: Subset<T, Compare_corp$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Compare_corp model
   */
  interface Compare_corpFieldRefs {
    readonly id: FieldRef<"Compare_corp", 'String'>
    readonly userId: FieldRef<"Compare_corp", 'String'>
    readonly corpId: FieldRef<"Compare_corp", 'String'>
    readonly created_at: FieldRef<"Compare_corp", 'DateTime'>
    readonly updated_at: FieldRef<"Compare_corp", 'DateTime'>
    readonly isDeleted: FieldRef<"Compare_corp", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Compare_corp findUnique
   */
  export type Compare_corpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which Compare_corp to fetch.
     */
    where: Compare_corpWhereUniqueInput
  }

  /**
   * Compare_corp findUniqueOrThrow
   */
  export type Compare_corpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which Compare_corp to fetch.
     */
    where: Compare_corpWhereUniqueInput
  }

  /**
   * Compare_corp findFirst
   */
  export type Compare_corpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which Compare_corp to fetch.
     */
    where?: Compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compare_corps to fetch.
     */
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compare_corps.
     */
    cursor?: Compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compare_corps.
     */
    distinct?: Compare_corpScalarFieldEnum | Compare_corpScalarFieldEnum[]
  }

  /**
   * Compare_corp findFirstOrThrow
   */
  export type Compare_corpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which Compare_corp to fetch.
     */
    where?: Compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compare_corps to fetch.
     */
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compare_corps.
     */
    cursor?: Compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compare_corps.
     */
    distinct?: Compare_corpScalarFieldEnum | Compare_corpScalarFieldEnum[]
  }

  /**
   * Compare_corp findMany
   */
  export type Compare_corpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which Compare_corps to fetch.
     */
    where?: Compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compare_corps to fetch.
     */
    orderBy?: Compare_corpOrderByWithRelationInput | Compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compare_corps.
     */
    cursor?: Compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compare_corps.
     */
    skip?: number
    distinct?: Compare_corpScalarFieldEnum | Compare_corpScalarFieldEnum[]
  }

  /**
   * Compare_corp create
   */
  export type Compare_corpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * The data needed to create a Compare_corp.
     */
    data: XOR<Compare_corpCreateInput, Compare_corpUncheckedCreateInput>
  }

  /**
   * Compare_corp createMany
   */
  export type Compare_corpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Compare_corps.
     */
    data: Compare_corpCreateManyInput | Compare_corpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Compare_corp createManyAndReturn
   */
  export type Compare_corpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * The data used to create many Compare_corps.
     */
    data: Compare_corpCreateManyInput | Compare_corpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Compare_corp update
   */
  export type Compare_corpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * The data needed to update a Compare_corp.
     */
    data: XOR<Compare_corpUpdateInput, Compare_corpUncheckedUpdateInput>
    /**
     * Choose, which Compare_corp to update.
     */
    where: Compare_corpWhereUniqueInput
  }

  /**
   * Compare_corp updateMany
   */
  export type Compare_corpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Compare_corps.
     */
    data: XOR<Compare_corpUpdateManyMutationInput, Compare_corpUncheckedUpdateManyInput>
    /**
     * Filter which Compare_corps to update
     */
    where?: Compare_corpWhereInput
    /**
     * Limit how many Compare_corps to update.
     */
    limit?: number
  }

  /**
   * Compare_corp updateManyAndReturn
   */
  export type Compare_corpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * The data used to update Compare_corps.
     */
    data: XOR<Compare_corpUpdateManyMutationInput, Compare_corpUncheckedUpdateManyInput>
    /**
     * Filter which Compare_corps to update
     */
    where?: Compare_corpWhereInput
    /**
     * Limit how many Compare_corps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Compare_corp upsert
   */
  export type Compare_corpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * The filter to search for the Compare_corp to update in case it exists.
     */
    where: Compare_corpWhereUniqueInput
    /**
     * In case the Compare_corp found by the `where` argument doesn't exist, create a new Compare_corp with this data.
     */
    create: XOR<Compare_corpCreateInput, Compare_corpUncheckedCreateInput>
    /**
     * In case the Compare_corp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Compare_corpUpdateInput, Compare_corpUncheckedUpdateInput>
  }

  /**
   * Compare_corp delete
   */
  export type Compare_corpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
    /**
     * Filter which Compare_corp to delete.
     */
    where: Compare_corpWhereUniqueInput
  }

  /**
   * Compare_corp deleteMany
   */
  export type Compare_corpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Compare_corps to delete
     */
    where?: Compare_corpWhereInput
    /**
     * Limit how many Compare_corps to delete.
     */
    limit?: number
  }

  /**
   * Compare_corp.corp
   */
  export type Compare_corp$corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    where?: CorpWhereInput
  }

  /**
   * Compare_corp.user
   */
  export type Compare_corp$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Compare_corp without action
   */
  export type Compare_corpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Compare_corp
     */
    select?: Compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Compare_corp
     */
    omit?: Compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Compare_corpInclude<ExtArgs> | null
  }


  /**
   * Model My_compare_corp
   */

  export type AggregateMy_compare_corp = {
    _count: My_compare_corpCountAggregateOutputType | null
    _min: My_compare_corpMinAggregateOutputType | null
    _max: My_compare_corpMaxAggregateOutputType | null
  }

  export type My_compare_corpMinAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
  }

  export type My_compare_corpMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    corpId: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
  }

  export type My_compare_corpCountAggregateOutputType = {
    id: number
    userId: number
    corpId: number
    created_at: number
    updated_at: number
    isDeleted: number
    _all: number
  }


  export type My_compare_corpMinAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
  }

  export type My_compare_corpMaxAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
  }

  export type My_compare_corpCountAggregateInputType = {
    id?: true
    userId?: true
    corpId?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    _all?: true
  }

  export type My_compare_corpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which My_compare_corp to aggregate.
     */
    where?: My_compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of My_compare_corps to fetch.
     */
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: My_compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` My_compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` My_compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned My_compare_corps
    **/
    _count?: true | My_compare_corpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: My_compare_corpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: My_compare_corpMaxAggregateInputType
  }

  export type GetMy_compare_corpAggregateType<T extends My_compare_corpAggregateArgs> = {
        [P in keyof T & keyof AggregateMy_compare_corp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMy_compare_corp[P]>
      : GetScalarType<T[P], AggregateMy_compare_corp[P]>
  }




  export type My_compare_corpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: My_compare_corpWhereInput
    orderBy?: My_compare_corpOrderByWithAggregationInput | My_compare_corpOrderByWithAggregationInput[]
    by: My_compare_corpScalarFieldEnum[] | My_compare_corpScalarFieldEnum
    having?: My_compare_corpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: My_compare_corpCountAggregateInputType | true
    _min?: My_compare_corpMinAggregateInputType
    _max?: My_compare_corpMaxAggregateInputType
  }

  export type My_compare_corpGroupByOutputType = {
    id: string
    userId: string | null
    corpId: string | null
    created_at: Date
    updated_at: Date
    isDeleted: boolean
    _count: My_compare_corpCountAggregateOutputType | null
    _min: My_compare_corpMinAggregateOutputType | null
    _max: My_compare_corpMaxAggregateOutputType | null
  }

  type GetMy_compare_corpGroupByPayload<T extends My_compare_corpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<My_compare_corpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof My_compare_corpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], My_compare_corpGroupByOutputType[P]>
            : GetScalarType<T[P], My_compare_corpGroupByOutputType[P]>
        }
      >
    >


  export type My_compare_corpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["my_compare_corp"]>

  export type My_compare_corpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["my_compare_corp"]>

  export type My_compare_corpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }, ExtArgs["result"]["my_compare_corp"]>

  export type My_compare_corpSelectScalar = {
    id?: boolean
    userId?: boolean
    corpId?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
  }

  export type My_compare_corpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "corpId" | "created_at" | "updated_at" | "isDeleted", ExtArgs["result"]["my_compare_corp"]>
  export type My_compare_corpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }
  export type My_compare_corpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }
  export type My_compare_corpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | My_compare_corp$corpArgs<ExtArgs>
    user?: boolean | My_compare_corp$userArgs<ExtArgs>
  }

  export type $My_compare_corpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "My_compare_corp"
    objects: {
      corp: Prisma.$CorpPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      corpId: string | null
      created_at: Date
      updated_at: Date
      isDeleted: boolean
    }, ExtArgs["result"]["my_compare_corp"]>
    composites: {}
  }

  type My_compare_corpGetPayload<S extends boolean | null | undefined | My_compare_corpDefaultArgs> = $Result.GetResult<Prisma.$My_compare_corpPayload, S>

  type My_compare_corpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<My_compare_corpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: My_compare_corpCountAggregateInputType | true
    }

  export interface My_compare_corpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['My_compare_corp'], meta: { name: 'My_compare_corp' } }
    /**
     * Find zero or one My_compare_corp that matches the filter.
     * @param {My_compare_corpFindUniqueArgs} args - Arguments to find a My_compare_corp
     * @example
     * // Get one My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends My_compare_corpFindUniqueArgs>(args: SelectSubset<T, My_compare_corpFindUniqueArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one My_compare_corp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {My_compare_corpFindUniqueOrThrowArgs} args - Arguments to find a My_compare_corp
     * @example
     * // Get one My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends My_compare_corpFindUniqueOrThrowArgs>(args: SelectSubset<T, My_compare_corpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first My_compare_corp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpFindFirstArgs} args - Arguments to find a My_compare_corp
     * @example
     * // Get one My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends My_compare_corpFindFirstArgs>(args?: SelectSubset<T, My_compare_corpFindFirstArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first My_compare_corp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpFindFirstOrThrowArgs} args - Arguments to find a My_compare_corp
     * @example
     * // Get one My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends My_compare_corpFindFirstOrThrowArgs>(args?: SelectSubset<T, My_compare_corpFindFirstOrThrowArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more My_compare_corps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all My_compare_corps
     * const my_compare_corps = await prisma.my_compare_corp.findMany()
     * 
     * // Get first 10 My_compare_corps
     * const my_compare_corps = await prisma.my_compare_corp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const my_compare_corpWithIdOnly = await prisma.my_compare_corp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends My_compare_corpFindManyArgs>(args?: SelectSubset<T, My_compare_corpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a My_compare_corp.
     * @param {My_compare_corpCreateArgs} args - Arguments to create a My_compare_corp.
     * @example
     * // Create one My_compare_corp
     * const My_compare_corp = await prisma.my_compare_corp.create({
     *   data: {
     *     // ... data to create a My_compare_corp
     *   }
     * })
     * 
     */
    create<T extends My_compare_corpCreateArgs>(args: SelectSubset<T, My_compare_corpCreateArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many My_compare_corps.
     * @param {My_compare_corpCreateManyArgs} args - Arguments to create many My_compare_corps.
     * @example
     * // Create many My_compare_corps
     * const my_compare_corp = await prisma.my_compare_corp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends My_compare_corpCreateManyArgs>(args?: SelectSubset<T, My_compare_corpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many My_compare_corps and returns the data saved in the database.
     * @param {My_compare_corpCreateManyAndReturnArgs} args - Arguments to create many My_compare_corps.
     * @example
     * // Create many My_compare_corps
     * const my_compare_corp = await prisma.my_compare_corp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many My_compare_corps and only return the `id`
     * const my_compare_corpWithIdOnly = await prisma.my_compare_corp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends My_compare_corpCreateManyAndReturnArgs>(args?: SelectSubset<T, My_compare_corpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a My_compare_corp.
     * @param {My_compare_corpDeleteArgs} args - Arguments to delete one My_compare_corp.
     * @example
     * // Delete one My_compare_corp
     * const My_compare_corp = await prisma.my_compare_corp.delete({
     *   where: {
     *     // ... filter to delete one My_compare_corp
     *   }
     * })
     * 
     */
    delete<T extends My_compare_corpDeleteArgs>(args: SelectSubset<T, My_compare_corpDeleteArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one My_compare_corp.
     * @param {My_compare_corpUpdateArgs} args - Arguments to update one My_compare_corp.
     * @example
     * // Update one My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends My_compare_corpUpdateArgs>(args: SelectSubset<T, My_compare_corpUpdateArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more My_compare_corps.
     * @param {My_compare_corpDeleteManyArgs} args - Arguments to filter My_compare_corps to delete.
     * @example
     * // Delete a few My_compare_corps
     * const { count } = await prisma.my_compare_corp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends My_compare_corpDeleteManyArgs>(args?: SelectSubset<T, My_compare_corpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more My_compare_corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many My_compare_corps
     * const my_compare_corp = await prisma.my_compare_corp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends My_compare_corpUpdateManyArgs>(args: SelectSubset<T, My_compare_corpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more My_compare_corps and returns the data updated in the database.
     * @param {My_compare_corpUpdateManyAndReturnArgs} args - Arguments to update many My_compare_corps.
     * @example
     * // Update many My_compare_corps
     * const my_compare_corp = await prisma.my_compare_corp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more My_compare_corps and only return the `id`
     * const my_compare_corpWithIdOnly = await prisma.my_compare_corp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends My_compare_corpUpdateManyAndReturnArgs>(args: SelectSubset<T, My_compare_corpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one My_compare_corp.
     * @param {My_compare_corpUpsertArgs} args - Arguments to update or create a My_compare_corp.
     * @example
     * // Update or create a My_compare_corp
     * const my_compare_corp = await prisma.my_compare_corp.upsert({
     *   create: {
     *     // ... data to create a My_compare_corp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the My_compare_corp we want to update
     *   }
     * })
     */
    upsert<T extends My_compare_corpUpsertArgs>(args: SelectSubset<T, My_compare_corpUpsertArgs<ExtArgs>>): Prisma__My_compare_corpClient<$Result.GetResult<Prisma.$My_compare_corpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of My_compare_corps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpCountArgs} args - Arguments to filter My_compare_corps to count.
     * @example
     * // Count the number of My_compare_corps
     * const count = await prisma.my_compare_corp.count({
     *   where: {
     *     // ... the filter for the My_compare_corps we want to count
     *   }
     * })
    **/
    count<T extends My_compare_corpCountArgs>(
      args?: Subset<T, My_compare_corpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], My_compare_corpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a My_compare_corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends My_compare_corpAggregateArgs>(args: Subset<T, My_compare_corpAggregateArgs>): Prisma.PrismaPromise<GetMy_compare_corpAggregateType<T>>

    /**
     * Group by My_compare_corp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {My_compare_corpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends My_compare_corpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: My_compare_corpGroupByArgs['orderBy'] }
        : { orderBy?: My_compare_corpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, My_compare_corpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMy_compare_corpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the My_compare_corp model
   */
  readonly fields: My_compare_corpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for My_compare_corp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__My_compare_corpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corp<T extends My_compare_corp$corpArgs<ExtArgs> = {}>(args?: Subset<T, My_compare_corp$corpArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends My_compare_corp$userArgs<ExtArgs> = {}>(args?: Subset<T, My_compare_corp$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the My_compare_corp model
   */
  interface My_compare_corpFieldRefs {
    readonly id: FieldRef<"My_compare_corp", 'String'>
    readonly userId: FieldRef<"My_compare_corp", 'String'>
    readonly corpId: FieldRef<"My_compare_corp", 'String'>
    readonly created_at: FieldRef<"My_compare_corp", 'DateTime'>
    readonly updated_at: FieldRef<"My_compare_corp", 'DateTime'>
    readonly isDeleted: FieldRef<"My_compare_corp", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * My_compare_corp findUnique
   */
  export type My_compare_corpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which My_compare_corp to fetch.
     */
    where: My_compare_corpWhereUniqueInput
  }

  /**
   * My_compare_corp findUniqueOrThrow
   */
  export type My_compare_corpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which My_compare_corp to fetch.
     */
    where: My_compare_corpWhereUniqueInput
  }

  /**
   * My_compare_corp findFirst
   */
  export type My_compare_corpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which My_compare_corp to fetch.
     */
    where?: My_compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of My_compare_corps to fetch.
     */
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for My_compare_corps.
     */
    cursor?: My_compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` My_compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` My_compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of My_compare_corps.
     */
    distinct?: My_compare_corpScalarFieldEnum | My_compare_corpScalarFieldEnum[]
  }

  /**
   * My_compare_corp findFirstOrThrow
   */
  export type My_compare_corpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which My_compare_corp to fetch.
     */
    where?: My_compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of My_compare_corps to fetch.
     */
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for My_compare_corps.
     */
    cursor?: My_compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` My_compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` My_compare_corps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of My_compare_corps.
     */
    distinct?: My_compare_corpScalarFieldEnum | My_compare_corpScalarFieldEnum[]
  }

  /**
   * My_compare_corp findMany
   */
  export type My_compare_corpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter, which My_compare_corps to fetch.
     */
    where?: My_compare_corpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of My_compare_corps to fetch.
     */
    orderBy?: My_compare_corpOrderByWithRelationInput | My_compare_corpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing My_compare_corps.
     */
    cursor?: My_compare_corpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` My_compare_corps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` My_compare_corps.
     */
    skip?: number
    distinct?: My_compare_corpScalarFieldEnum | My_compare_corpScalarFieldEnum[]
  }

  /**
   * My_compare_corp create
   */
  export type My_compare_corpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * The data needed to create a My_compare_corp.
     */
    data: XOR<My_compare_corpCreateInput, My_compare_corpUncheckedCreateInput>
  }

  /**
   * My_compare_corp createMany
   */
  export type My_compare_corpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many My_compare_corps.
     */
    data: My_compare_corpCreateManyInput | My_compare_corpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * My_compare_corp createManyAndReturn
   */
  export type My_compare_corpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * The data used to create many My_compare_corps.
     */
    data: My_compare_corpCreateManyInput | My_compare_corpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * My_compare_corp update
   */
  export type My_compare_corpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * The data needed to update a My_compare_corp.
     */
    data: XOR<My_compare_corpUpdateInput, My_compare_corpUncheckedUpdateInput>
    /**
     * Choose, which My_compare_corp to update.
     */
    where: My_compare_corpWhereUniqueInput
  }

  /**
   * My_compare_corp updateMany
   */
  export type My_compare_corpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update My_compare_corps.
     */
    data: XOR<My_compare_corpUpdateManyMutationInput, My_compare_corpUncheckedUpdateManyInput>
    /**
     * Filter which My_compare_corps to update
     */
    where?: My_compare_corpWhereInput
    /**
     * Limit how many My_compare_corps to update.
     */
    limit?: number
  }

  /**
   * My_compare_corp updateManyAndReturn
   */
  export type My_compare_corpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * The data used to update My_compare_corps.
     */
    data: XOR<My_compare_corpUpdateManyMutationInput, My_compare_corpUncheckedUpdateManyInput>
    /**
     * Filter which My_compare_corps to update
     */
    where?: My_compare_corpWhereInput
    /**
     * Limit how many My_compare_corps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * My_compare_corp upsert
   */
  export type My_compare_corpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * The filter to search for the My_compare_corp to update in case it exists.
     */
    where: My_compare_corpWhereUniqueInput
    /**
     * In case the My_compare_corp found by the `where` argument doesn't exist, create a new My_compare_corp with this data.
     */
    create: XOR<My_compare_corpCreateInput, My_compare_corpUncheckedCreateInput>
    /**
     * In case the My_compare_corp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<My_compare_corpUpdateInput, My_compare_corpUncheckedUpdateInput>
  }

  /**
   * My_compare_corp delete
   */
  export type My_compare_corpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
    /**
     * Filter which My_compare_corp to delete.
     */
    where: My_compare_corpWhereUniqueInput
  }

  /**
   * My_compare_corp deleteMany
   */
  export type My_compare_corpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which My_compare_corps to delete
     */
    where?: My_compare_corpWhereInput
    /**
     * Limit how many My_compare_corps to delete.
     */
    limit?: number
  }

  /**
   * My_compare_corp.corp
   */
  export type My_compare_corp$corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    where?: CorpWhereInput
  }

  /**
   * My_compare_corp.user
   */
  export type My_compare_corp$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * My_compare_corp without action
   */
  export type My_compare_corpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the My_compare_corp
     */
    select?: My_compare_corpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the My_compare_corp
     */
    omit?: My_compare_corpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: My_compare_corpInclude<ExtArgs> | null
  }


  /**
   * Model Investment
   */

  export type AggregateInvestment = {
    _count: InvestmentCountAggregateOutputType | null
    _avg: InvestmentAvgAggregateOutputType | null
    _sum: InvestmentSumAggregateOutputType | null
    _min: InvestmentMinAggregateOutputType | null
    _max: InvestmentMaxAggregateOutputType | null
  }

  export type InvestmentAvgAggregateOutputType = {
    amount: number | null
  }

  export type InvestmentSumAggregateOutputType = {
    amount: number | null
  }

  export type InvestmentMinAggregateOutputType = {
    amount: number | null
    amount_comment: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
    accountId: string | null
    id: string | null
  }

  export type InvestmentMaxAggregateOutputType = {
    amount: number | null
    amount_comment: string | null
    created_at: Date | null
    updated_at: Date | null
    isDeleted: boolean | null
    accountId: string | null
    id: string | null
  }

  export type InvestmentCountAggregateOutputType = {
    amount: number
    amount_comment: number
    created_at: number
    updated_at: number
    isDeleted: number
    accountId: number
    id: number
    _all: number
  }


  export type InvestmentAvgAggregateInputType = {
    amount?: true
  }

  export type InvestmentSumAggregateInputType = {
    amount?: true
  }

  export type InvestmentMinAggregateInputType = {
    amount?: true
    amount_comment?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    accountId?: true
    id?: true
  }

  export type InvestmentMaxAggregateInputType = {
    amount?: true
    amount_comment?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    accountId?: true
    id?: true
  }

  export type InvestmentCountAggregateInputType = {
    amount?: true
    amount_comment?: true
    created_at?: true
    updated_at?: true
    isDeleted?: true
    accountId?: true
    id?: true
    _all?: true
  }

  export type InvestmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investment to aggregate.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Investments
    **/
    _count?: true | InvestmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InvestmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InvestmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestmentMaxAggregateInputType
  }

  export type GetInvestmentAggregateType<T extends InvestmentAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestment[P]>
      : GetScalarType<T[P], AggregateInvestment[P]>
  }




  export type InvestmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithAggregationInput | InvestmentOrderByWithAggregationInput[]
    by: InvestmentScalarFieldEnum[] | InvestmentScalarFieldEnum
    having?: InvestmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestmentCountAggregateInputType | true
    _avg?: InvestmentAvgAggregateInputType
    _sum?: InvestmentSumAggregateInputType
    _min?: InvestmentMinAggregateInputType
    _max?: InvestmentMaxAggregateInputType
  }

  export type InvestmentGroupByOutputType = {
    amount: number
    amount_comment: string
    created_at: Date
    updated_at: Date
    isDeleted: boolean
    accountId: string | null
    id: string
    _count: InvestmentCountAggregateOutputType | null
    _avg: InvestmentAvgAggregateOutputType | null
    _sum: InvestmentSumAggregateOutputType | null
    _min: InvestmentMinAggregateOutputType | null
    _max: InvestmentMaxAggregateOutputType | null
  }

  type GetInvestmentGroupByPayload<T extends InvestmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestmentGroupByOutputType[P]>
            : GetScalarType<T[P], InvestmentGroupByOutputType[P]>
        }
      >
    >


  export type InvestmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amount?: boolean
    amount_comment?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    accountId?: boolean
    id?: boolean
    account?: boolean | Investment$accountArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amount?: boolean
    amount_comment?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    accountId?: boolean
    id?: boolean
    account?: boolean | Investment$accountArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    amount?: boolean
    amount_comment?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    accountId?: boolean
    id?: boolean
    account?: boolean | Investment$accountArgs<ExtArgs>
  }, ExtArgs["result"]["investment"]>

  export type InvestmentSelectScalar = {
    amount?: boolean
    amount_comment?: boolean
    created_at?: boolean
    updated_at?: boolean
    isDeleted?: boolean
    accountId?: boolean
    id?: boolean
  }

  export type InvestmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"amount" | "amount_comment" | "created_at" | "updated_at" | "isDeleted" | "accountId" | "id", ExtArgs["result"]["investment"]>
  export type InvestmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | Investment$accountArgs<ExtArgs>
  }
  export type InvestmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | Investment$accountArgs<ExtArgs>
  }
  export type InvestmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | Investment$accountArgs<ExtArgs>
  }

  export type $InvestmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Investment"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      amount: number
      amount_comment: string
      created_at: Date
      updated_at: Date
      isDeleted: boolean
      accountId: string | null
      id: string
    }, ExtArgs["result"]["investment"]>
    composites: {}
  }

  type InvestmentGetPayload<S extends boolean | null | undefined | InvestmentDefaultArgs> = $Result.GetResult<Prisma.$InvestmentPayload, S>

  type InvestmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InvestmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InvestmentCountAggregateInputType | true
    }

  export interface InvestmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Investment'], meta: { name: 'Investment' } }
    /**
     * Find zero or one Investment that matches the filter.
     * @param {InvestmentFindUniqueArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InvestmentFindUniqueArgs>(args: SelectSubset<T, InvestmentFindUniqueArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Investment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InvestmentFindUniqueOrThrowArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InvestmentFindUniqueOrThrowArgs>(args: SelectSubset<T, InvestmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Investment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindFirstArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InvestmentFindFirstArgs>(args?: SelectSubset<T, InvestmentFindFirstArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Investment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindFirstOrThrowArgs} args - Arguments to find a Investment
     * @example
     * // Get one Investment
     * const investment = await prisma.investment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InvestmentFindFirstOrThrowArgs>(args?: SelectSubset<T, InvestmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Investments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investments
     * const investments = await prisma.investment.findMany()
     * 
     * // Get first 10 Investments
     * const investments = await prisma.investment.findMany({ take: 10 })
     * 
     * // Only select the `amount`
     * const investmentWithAmountOnly = await prisma.investment.findMany({ select: { amount: true } })
     * 
     */
    findMany<T extends InvestmentFindManyArgs>(args?: SelectSubset<T, InvestmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Investment.
     * @param {InvestmentCreateArgs} args - Arguments to create a Investment.
     * @example
     * // Create one Investment
     * const Investment = await prisma.investment.create({
     *   data: {
     *     // ... data to create a Investment
     *   }
     * })
     * 
     */
    create<T extends InvestmentCreateArgs>(args: SelectSubset<T, InvestmentCreateArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Investments.
     * @param {InvestmentCreateManyArgs} args - Arguments to create many Investments.
     * @example
     * // Create many Investments
     * const investment = await prisma.investment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InvestmentCreateManyArgs>(args?: SelectSubset<T, InvestmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Investments and returns the data saved in the database.
     * @param {InvestmentCreateManyAndReturnArgs} args - Arguments to create many Investments.
     * @example
     * // Create many Investments
     * const investment = await prisma.investment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Investments and only return the `amount`
     * const investmentWithAmountOnly = await prisma.investment.createManyAndReturn({
     *   select: { amount: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InvestmentCreateManyAndReturnArgs>(args?: SelectSubset<T, InvestmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Investment.
     * @param {InvestmentDeleteArgs} args - Arguments to delete one Investment.
     * @example
     * // Delete one Investment
     * const Investment = await prisma.investment.delete({
     *   where: {
     *     // ... filter to delete one Investment
     *   }
     * })
     * 
     */
    delete<T extends InvestmentDeleteArgs>(args: SelectSubset<T, InvestmentDeleteArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Investment.
     * @param {InvestmentUpdateArgs} args - Arguments to update one Investment.
     * @example
     * // Update one Investment
     * const investment = await prisma.investment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InvestmentUpdateArgs>(args: SelectSubset<T, InvestmentUpdateArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Investments.
     * @param {InvestmentDeleteManyArgs} args - Arguments to filter Investments to delete.
     * @example
     * // Delete a few Investments
     * const { count } = await prisma.investment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InvestmentDeleteManyArgs>(args?: SelectSubset<T, InvestmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investments
     * const investment = await prisma.investment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InvestmentUpdateManyArgs>(args: SelectSubset<T, InvestmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investments and returns the data updated in the database.
     * @param {InvestmentUpdateManyAndReturnArgs} args - Arguments to update many Investments.
     * @example
     * // Update many Investments
     * const investment = await prisma.investment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Investments and only return the `amount`
     * const investmentWithAmountOnly = await prisma.investment.updateManyAndReturn({
     *   select: { amount: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InvestmentUpdateManyAndReturnArgs>(args: SelectSubset<T, InvestmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Investment.
     * @param {InvestmentUpsertArgs} args - Arguments to update or create a Investment.
     * @example
     * // Update or create a Investment
     * const investment = await prisma.investment.upsert({
     *   create: {
     *     // ... data to create a Investment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investment we want to update
     *   }
     * })
     */
    upsert<T extends InvestmentUpsertArgs>(args: SelectSubset<T, InvestmentUpsertArgs<ExtArgs>>): Prisma__InvestmentClient<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Investments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentCountArgs} args - Arguments to filter Investments to count.
     * @example
     * // Count the number of Investments
     * const count = await prisma.investment.count({
     *   where: {
     *     // ... the filter for the Investments we want to count
     *   }
     * })
    **/
    count<T extends InvestmentCountArgs>(
      args?: Subset<T, InvestmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Investment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestmentAggregateArgs>(args: Subset<T, InvestmentAggregateArgs>): Prisma.PrismaPromise<GetInvestmentAggregateType<T>>

    /**
     * Group by Investment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvestmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvestmentGroupByArgs['orderBy'] }
        : { orderBy?: InvestmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvestmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Investment model
   */
  readonly fields: InvestmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Investment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvestmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    account<T extends Investment$accountArgs<ExtArgs> = {}>(args?: Subset<T, Investment$accountArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Investment model
   */
  interface InvestmentFieldRefs {
    readonly amount: FieldRef<"Investment", 'Int'>
    readonly amount_comment: FieldRef<"Investment", 'String'>
    readonly created_at: FieldRef<"Investment", 'DateTime'>
    readonly updated_at: FieldRef<"Investment", 'DateTime'>
    readonly isDeleted: FieldRef<"Investment", 'Boolean'>
    readonly accountId: FieldRef<"Investment", 'String'>
    readonly id: FieldRef<"Investment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Investment findUnique
   */
  export type InvestmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment findUniqueOrThrow
   */
  export type InvestmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment findFirst
   */
  export type InvestmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investments.
     */
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment findFirstOrThrow
   */
  export type InvestmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investment to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investments.
     */
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment findMany
   */
  export type InvestmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter, which Investments to fetch.
     */
    where?: InvestmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investments to fetch.
     */
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Investments.
     */
    cursor?: InvestmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investments.
     */
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Investment create
   */
  export type InvestmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Investment.
     */
    data: XOR<InvestmentCreateInput, InvestmentUncheckedCreateInput>
  }

  /**
   * Investment createMany
   */
  export type InvestmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Investments.
     */
    data: InvestmentCreateManyInput | InvestmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Investment createManyAndReturn
   */
  export type InvestmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * The data used to create many Investments.
     */
    data: InvestmentCreateManyInput | InvestmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Investment update
   */
  export type InvestmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Investment.
     */
    data: XOR<InvestmentUpdateInput, InvestmentUncheckedUpdateInput>
    /**
     * Choose, which Investment to update.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment updateMany
   */
  export type InvestmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Investments.
     */
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyInput>
    /**
     * Filter which Investments to update
     */
    where?: InvestmentWhereInput
    /**
     * Limit how many Investments to update.
     */
    limit?: number
  }

  /**
   * Investment updateManyAndReturn
   */
  export type InvestmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * The data used to update Investments.
     */
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyInput>
    /**
     * Filter which Investments to update
     */
    where?: InvestmentWhereInput
    /**
     * Limit how many Investments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Investment upsert
   */
  export type InvestmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Investment to update in case it exists.
     */
    where: InvestmentWhereUniqueInput
    /**
     * In case the Investment found by the `where` argument doesn't exist, create a new Investment with this data.
     */
    create: XOR<InvestmentCreateInput, InvestmentUncheckedCreateInput>
    /**
     * In case the Investment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvestmentUpdateInput, InvestmentUncheckedUpdateInput>
  }

  /**
   * Investment delete
   */
  export type InvestmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    /**
     * Filter which Investment to delete.
     */
    where: InvestmentWhereUniqueInput
  }

  /**
   * Investment deleteMany
   */
  export type InvestmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investments to delete
     */
    where?: InvestmentWhereInput
    /**
     * Limit how many Investments to delete.
     */
    limit?: number
  }

  /**
   * Investment.account
   */
  export type Investment$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
  }

  /**
   * Investment without action
   */
  export type InvestmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    created_at: Date | null
    updated_at: Date | null
    corpId: string | null
    id: string | null
    userId: string | null
  }

  export type AccountMaxAggregateOutputType = {
    created_at: Date | null
    updated_at: Date | null
    corpId: string | null
    id: string | null
    userId: string | null
  }

  export type AccountCountAggregateOutputType = {
    created_at: number
    updated_at: number
    corpId: number
    id: number
    userId: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    created_at?: true
    updated_at?: true
    corpId?: true
    id?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    created_at?: true
    updated_at?: true
    corpId?: true
    id?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    created_at?: true
    updated_at?: true
    corpId?: true
    id?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    created_at: Date
    updated_at: Date
    corpId: string | null
    id: string
    userId: string | null
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    created_at?: boolean
    updated_at?: boolean
    corpId?: boolean
    id?: boolean
    userId?: boolean
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
    Investment?: boolean | Account$InvestmentArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    created_at?: boolean
    updated_at?: boolean
    corpId?: boolean
    id?: boolean
    userId?: boolean
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    created_at?: boolean
    updated_at?: boolean
    corpId?: boolean
    id?: boolean
    userId?: boolean
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    created_at?: boolean
    updated_at?: boolean
    corpId?: boolean
    id?: boolean
    userId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"created_at" | "updated_at" | "corpId" | "id" | "userId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
    Investment?: boolean | Account$InvestmentArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corp?: boolean | Account$corpArgs<ExtArgs>
    user?: boolean | Account$userArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      corp: Prisma.$CorpPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
      Investment: Prisma.$InvestmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      created_at: Date
      updated_at: Date
      corpId: string | null
      id: string
      userId: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `created_at`
     * const accountWithCreated_atOnly = await prisma.account.findMany({ select: { created_at: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `created_at`
     * const accountWithCreated_atOnly = await prisma.account.createManyAndReturn({
     *   select: { created_at: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `created_at`
     * const accountWithCreated_atOnly = await prisma.account.updateManyAndReturn({
     *   select: { created_at: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corp<T extends Account$corpArgs<ExtArgs> = {}>(args?: Subset<T, Account$corpArgs<ExtArgs>>): Prisma__CorpClient<$Result.GetResult<Prisma.$CorpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends Account$userArgs<ExtArgs> = {}>(args?: Subset<T, Account$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    Investment<T extends Account$InvestmentArgs<ExtArgs> = {}>(args?: Subset<T, Account$InvestmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly created_at: FieldRef<"Account", 'DateTime'>
    readonly updated_at: FieldRef<"Account", 'DateTime'>
    readonly corpId: FieldRef<"Account", 'String'>
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.corp
   */
  export type Account$corpArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corp
     */
    select?: CorpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Corp
     */
    omit?: CorpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorpInclude<ExtArgs> | null
    where?: CorpWhereInput
  }

  /**
   * Account.user
   */
  export type Account$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account.Investment
   */
  export type Account$InvestmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investment
     */
    select?: InvestmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Investment
     */
    omit?: InvestmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestmentInclude<ExtArgs> | null
    where?: InvestmentWhereInput
    orderBy?: InvestmentOrderByWithRelationInput | InvestmentOrderByWithRelationInput[]
    cursor?: InvestmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InvestmentScalarFieldEnum | InvestmentScalarFieldEnum[]
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    name: 'name',
    email: 'email',
    password: 'password',
    birth: 'birth',
    created_at: 'created_at',
    updated_at: 'updated_at',
    isDeleted: 'isDeleted',
    id: 'id',
    gender: 'gender'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CorpScalarFieldEnum: {
    id: 'id',
    corp_name: 'corp_name',
    corp_tag: 'corp_tag',
    corp_profile: 'corp_profile',
    total_investment: 'total_investment',
    corp_sales: 'corp_sales',
    employee: 'employee',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CorpScalarFieldEnum = (typeof CorpScalarFieldEnum)[keyof typeof CorpScalarFieldEnum]


  export const Option_countScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    corpId: 'corpId',
    my_compare_corp: 'my_compare_corp',
    compare_corp: 'compare_corp',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Option_countScalarFieldEnum = (typeof Option_countScalarFieldEnum)[keyof typeof Option_countScalarFieldEnum]


  export const Compare_corpScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    corpId: 'corpId',
    created_at: 'created_at',
    updated_at: 'updated_at',
    isDeleted: 'isDeleted'
  };

  export type Compare_corpScalarFieldEnum = (typeof Compare_corpScalarFieldEnum)[keyof typeof Compare_corpScalarFieldEnum]


  export const My_compare_corpScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    corpId: 'corpId',
    created_at: 'created_at',
    updated_at: 'updated_at',
    isDeleted: 'isDeleted'
  };

  export type My_compare_corpScalarFieldEnum = (typeof My_compare_corpScalarFieldEnum)[keyof typeof My_compare_corpScalarFieldEnum]


  export const InvestmentScalarFieldEnum: {
    amount: 'amount',
    amount_comment: 'amount_comment',
    created_at: 'created_at',
    updated_at: 'updated_at',
    isDeleted: 'isDeleted',
    accountId: 'accountId',
    id: 'id'
  };

  export type InvestmentScalarFieldEnum = (typeof InvestmentScalarFieldEnum)[keyof typeof InvestmentScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    created_at: 'created_at',
    updated_at: 'updated_at',
    corpId: 'corpId',
    id: 'id',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    birth?: DateTimeFilter<"User"> | Date | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    isDeleted?: BoolFilter<"User"> | boolean
    id?: StringFilter<"User"> | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    Account?: AccountListRelationFilter
    Compare_corp?: Compare_corpListRelationFilter
    My_compare_corp?: My_compare_corpListRelationFilter
    Option_count?: Option_countListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    birth?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    id?: SortOrder
    gender?: SortOrder
    Account?: AccountOrderByRelationAggregateInput
    Compare_corp?: Compare_corpOrderByRelationAggregateInput
    My_compare_corp?: My_compare_corpOrderByRelationAggregateInput
    Option_count?: Option_countOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    birth?: DateTimeFilter<"User"> | Date | string
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    isDeleted?: BoolFilter<"User"> | boolean
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    Account?: AccountListRelationFilter
    Compare_corp?: Compare_corpListRelationFilter
    My_compare_corp?: My_compare_corpListRelationFilter
    Option_count?: Option_countListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    birth?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    id?: SortOrder
    gender?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    birth?: DateTimeWithAggregatesFilter<"User"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"User"> | boolean
    id?: StringWithAggregatesFilter<"User"> | string
    gender?: EnumGenderWithAggregatesFilter<"User"> | $Enums.Gender
  }

  export type CorpWhereInput = {
    AND?: CorpWhereInput | CorpWhereInput[]
    OR?: CorpWhereInput[]
    NOT?: CorpWhereInput | CorpWhereInput[]
    id?: StringFilter<"Corp"> | string
    corp_name?: StringFilter<"Corp"> | string
    corp_tag?: StringFilter<"Corp"> | string
    corp_profile?: StringFilter<"Corp"> | string
    total_investment?: BigIntFilter<"Corp"> | bigint | number
    corp_sales?: BigIntFilter<"Corp"> | bigint | number
    employee?: IntFilter<"Corp"> | number
    created_at?: DateTimeFilter<"Corp"> | Date | string
    updated_at?: DateTimeFilter<"Corp"> | Date | string
    Account?: AccountListRelationFilter
    Compare_corp?: Compare_corpListRelationFilter
    My_compare_corp?: My_compare_corpListRelationFilter
    Option_count?: Option_countListRelationFilter
  }

  export type CorpOrderByWithRelationInput = {
    id?: SortOrder
    corp_name?: SortOrder
    corp_tag?: SortOrder
    corp_profile?: SortOrder
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    Account?: AccountOrderByRelationAggregateInput
    Compare_corp?: Compare_corpOrderByRelationAggregateInput
    My_compare_corp?: My_compare_corpOrderByRelationAggregateInput
    Option_count?: Option_countOrderByRelationAggregateInput
  }

  export type CorpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CorpWhereInput | CorpWhereInput[]
    OR?: CorpWhereInput[]
    NOT?: CorpWhereInput | CorpWhereInput[]
    corp_name?: StringFilter<"Corp"> | string
    corp_tag?: StringFilter<"Corp"> | string
    corp_profile?: StringFilter<"Corp"> | string
    total_investment?: BigIntFilter<"Corp"> | bigint | number
    corp_sales?: BigIntFilter<"Corp"> | bigint | number
    employee?: IntFilter<"Corp"> | number
    created_at?: DateTimeFilter<"Corp"> | Date | string
    updated_at?: DateTimeFilter<"Corp"> | Date | string
    Account?: AccountListRelationFilter
    Compare_corp?: Compare_corpListRelationFilter
    My_compare_corp?: My_compare_corpListRelationFilter
    Option_count?: Option_countListRelationFilter
  }, "id">

  export type CorpOrderByWithAggregationInput = {
    id?: SortOrder
    corp_name?: SortOrder
    corp_tag?: SortOrder
    corp_profile?: SortOrder
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CorpCountOrderByAggregateInput
    _avg?: CorpAvgOrderByAggregateInput
    _max?: CorpMaxOrderByAggregateInput
    _min?: CorpMinOrderByAggregateInput
    _sum?: CorpSumOrderByAggregateInput
  }

  export type CorpScalarWhereWithAggregatesInput = {
    AND?: CorpScalarWhereWithAggregatesInput | CorpScalarWhereWithAggregatesInput[]
    OR?: CorpScalarWhereWithAggregatesInput[]
    NOT?: CorpScalarWhereWithAggregatesInput | CorpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Corp"> | string
    corp_name?: StringWithAggregatesFilter<"Corp"> | string
    corp_tag?: StringWithAggregatesFilter<"Corp"> | string
    corp_profile?: StringWithAggregatesFilter<"Corp"> | string
    total_investment?: BigIntWithAggregatesFilter<"Corp"> | bigint | number
    corp_sales?: BigIntWithAggregatesFilter<"Corp"> | bigint | number
    employee?: IntWithAggregatesFilter<"Corp"> | number
    created_at?: DateTimeWithAggregatesFilter<"Corp"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Corp"> | Date | string
  }

  export type Option_countWhereInput = {
    AND?: Option_countWhereInput | Option_countWhereInput[]
    OR?: Option_countWhereInput[]
    NOT?: Option_countWhereInput | Option_countWhereInput[]
    id?: StringFilter<"Option_count"> | string
    userId?: StringNullableFilter<"Option_count"> | string | null
    corpId?: StringNullableFilter<"Option_count"> | string | null
    my_compare_corp?: IntFilter<"Option_count"> | number
    compare_corp?: IntFilter<"Option_count"> | number
    created_at?: DateTimeFilter<"Option_count"> | Date | string
    updated_at?: DateTimeFilter<"Option_count"> | Date | string
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type Option_countOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    corp?: CorpOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type Option_countWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Option_countWhereInput | Option_countWhereInput[]
    OR?: Option_countWhereInput[]
    NOT?: Option_countWhereInput | Option_countWhereInput[]
    userId?: StringNullableFilter<"Option_count"> | string | null
    corpId?: StringNullableFilter<"Option_count"> | string | null
    my_compare_corp?: IntFilter<"Option_count"> | number
    compare_corp?: IntFilter<"Option_count"> | number
    created_at?: DateTimeFilter<"Option_count"> | Date | string
    updated_at?: DateTimeFilter<"Option_count"> | Date | string
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type Option_countOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: Option_countCountOrderByAggregateInput
    _avg?: Option_countAvgOrderByAggregateInput
    _max?: Option_countMaxOrderByAggregateInput
    _min?: Option_countMinOrderByAggregateInput
    _sum?: Option_countSumOrderByAggregateInput
  }

  export type Option_countScalarWhereWithAggregatesInput = {
    AND?: Option_countScalarWhereWithAggregatesInput | Option_countScalarWhereWithAggregatesInput[]
    OR?: Option_countScalarWhereWithAggregatesInput[]
    NOT?: Option_countScalarWhereWithAggregatesInput | Option_countScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Option_count"> | string
    userId?: StringNullableWithAggregatesFilter<"Option_count"> | string | null
    corpId?: StringNullableWithAggregatesFilter<"Option_count"> | string | null
    my_compare_corp?: IntWithAggregatesFilter<"Option_count"> | number
    compare_corp?: IntWithAggregatesFilter<"Option_count"> | number
    created_at?: DateTimeWithAggregatesFilter<"Option_count"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Option_count"> | Date | string
  }

  export type Compare_corpWhereInput = {
    AND?: Compare_corpWhereInput | Compare_corpWhereInput[]
    OR?: Compare_corpWhereInput[]
    NOT?: Compare_corpWhereInput | Compare_corpWhereInput[]
    id?: StringFilter<"Compare_corp"> | string
    userId?: StringNullableFilter<"Compare_corp"> | string | null
    corpId?: StringNullableFilter<"Compare_corp"> | string | null
    created_at?: DateTimeFilter<"Compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"Compare_corp"> | Date | string
    isDeleted?: BoolFilter<"Compare_corp"> | boolean
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type Compare_corpOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    corp?: CorpOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type Compare_corpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Compare_corpWhereInput | Compare_corpWhereInput[]
    OR?: Compare_corpWhereInput[]
    NOT?: Compare_corpWhereInput | Compare_corpWhereInput[]
    userId?: StringNullableFilter<"Compare_corp"> | string | null
    corpId?: StringNullableFilter<"Compare_corp"> | string | null
    created_at?: DateTimeFilter<"Compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"Compare_corp"> | Date | string
    isDeleted?: BoolFilter<"Compare_corp"> | boolean
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type Compare_corpOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    _count?: Compare_corpCountOrderByAggregateInput
    _max?: Compare_corpMaxOrderByAggregateInput
    _min?: Compare_corpMinOrderByAggregateInput
  }

  export type Compare_corpScalarWhereWithAggregatesInput = {
    AND?: Compare_corpScalarWhereWithAggregatesInput | Compare_corpScalarWhereWithAggregatesInput[]
    OR?: Compare_corpScalarWhereWithAggregatesInput[]
    NOT?: Compare_corpScalarWhereWithAggregatesInput | Compare_corpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Compare_corp"> | string
    userId?: StringNullableWithAggregatesFilter<"Compare_corp"> | string | null
    corpId?: StringNullableWithAggregatesFilter<"Compare_corp"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"Compare_corp"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Compare_corp"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"Compare_corp"> | boolean
  }

  export type My_compare_corpWhereInput = {
    AND?: My_compare_corpWhereInput | My_compare_corpWhereInput[]
    OR?: My_compare_corpWhereInput[]
    NOT?: My_compare_corpWhereInput | My_compare_corpWhereInput[]
    id?: StringFilter<"My_compare_corp"> | string
    userId?: StringNullableFilter<"My_compare_corp"> | string | null
    corpId?: StringNullableFilter<"My_compare_corp"> | string | null
    created_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    isDeleted?: BoolFilter<"My_compare_corp"> | boolean
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type My_compare_corpOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    corp?: CorpOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type My_compare_corpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: My_compare_corpWhereInput | My_compare_corpWhereInput[]
    OR?: My_compare_corpWhereInput[]
    NOT?: My_compare_corpWhereInput | My_compare_corpWhereInput[]
    userId?: StringNullableFilter<"My_compare_corp"> | string | null
    corpId?: StringNullableFilter<"My_compare_corp"> | string | null
    created_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    isDeleted?: BoolFilter<"My_compare_corp"> | boolean
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type My_compare_corpOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corpId?: SortOrderInput | SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    _count?: My_compare_corpCountOrderByAggregateInput
    _max?: My_compare_corpMaxOrderByAggregateInput
    _min?: My_compare_corpMinOrderByAggregateInput
  }

  export type My_compare_corpScalarWhereWithAggregatesInput = {
    AND?: My_compare_corpScalarWhereWithAggregatesInput | My_compare_corpScalarWhereWithAggregatesInput[]
    OR?: My_compare_corpScalarWhereWithAggregatesInput[]
    NOT?: My_compare_corpScalarWhereWithAggregatesInput | My_compare_corpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"My_compare_corp"> | string
    userId?: StringNullableWithAggregatesFilter<"My_compare_corp"> | string | null
    corpId?: StringNullableWithAggregatesFilter<"My_compare_corp"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"My_compare_corp"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"My_compare_corp"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"My_compare_corp"> | boolean
  }

  export type InvestmentWhereInput = {
    AND?: InvestmentWhereInput | InvestmentWhereInput[]
    OR?: InvestmentWhereInput[]
    NOT?: InvestmentWhereInput | InvestmentWhereInput[]
    amount?: IntFilter<"Investment"> | number
    amount_comment?: StringFilter<"Investment"> | string
    created_at?: DateTimeFilter<"Investment"> | Date | string
    updated_at?: DateTimeFilter<"Investment"> | Date | string
    isDeleted?: BoolFilter<"Investment"> | boolean
    accountId?: StringNullableFilter<"Investment"> | string | null
    id?: StringFilter<"Investment"> | string
    account?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
  }

  export type InvestmentOrderByWithRelationInput = {
    amount?: SortOrder
    amount_comment?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    accountId?: SortOrderInput | SortOrder
    id?: SortOrder
    account?: AccountOrderByWithRelationInput
  }

  export type InvestmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InvestmentWhereInput | InvestmentWhereInput[]
    OR?: InvestmentWhereInput[]
    NOT?: InvestmentWhereInput | InvestmentWhereInput[]
    amount?: IntFilter<"Investment"> | number
    amount_comment?: StringFilter<"Investment"> | string
    created_at?: DateTimeFilter<"Investment"> | Date | string
    updated_at?: DateTimeFilter<"Investment"> | Date | string
    isDeleted?: BoolFilter<"Investment"> | boolean
    accountId?: StringNullableFilter<"Investment"> | string | null
    account?: XOR<AccountNullableScalarRelationFilter, AccountWhereInput> | null
  }, "id">

  export type InvestmentOrderByWithAggregationInput = {
    amount?: SortOrder
    amount_comment?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    accountId?: SortOrderInput | SortOrder
    id?: SortOrder
    _count?: InvestmentCountOrderByAggregateInput
    _avg?: InvestmentAvgOrderByAggregateInput
    _max?: InvestmentMaxOrderByAggregateInput
    _min?: InvestmentMinOrderByAggregateInput
    _sum?: InvestmentSumOrderByAggregateInput
  }

  export type InvestmentScalarWhereWithAggregatesInput = {
    AND?: InvestmentScalarWhereWithAggregatesInput | InvestmentScalarWhereWithAggregatesInput[]
    OR?: InvestmentScalarWhereWithAggregatesInput[]
    NOT?: InvestmentScalarWhereWithAggregatesInput | InvestmentScalarWhereWithAggregatesInput[]
    amount?: IntWithAggregatesFilter<"Investment"> | number
    amount_comment?: StringWithAggregatesFilter<"Investment"> | string
    created_at?: DateTimeWithAggregatesFilter<"Investment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Investment"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"Investment"> | boolean
    accountId?: StringNullableWithAggregatesFilter<"Investment"> | string | null
    id?: StringWithAggregatesFilter<"Investment"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    created_at?: DateTimeFilter<"Account"> | Date | string
    updated_at?: DateTimeFilter<"Account"> | Date | string
    corpId?: StringNullableFilter<"Account"> | string | null
    id?: StringFilter<"Account"> | string
    userId?: StringNullableFilter<"Account"> | string | null
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    Investment?: InvestmentListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    created_at?: SortOrder
    updated_at?: SortOrder
    corpId?: SortOrderInput | SortOrder
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    corp?: CorpOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    Investment?: InvestmentOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    created_at?: DateTimeFilter<"Account"> | Date | string
    updated_at?: DateTimeFilter<"Account"> | Date | string
    corpId?: StringNullableFilter<"Account"> | string | null
    userId?: StringNullableFilter<"Account"> | string | null
    corp?: XOR<CorpNullableScalarRelationFilter, CorpWhereInput> | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    Investment?: InvestmentListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    created_at?: SortOrder
    updated_at?: SortOrder
    corpId?: SortOrderInput | SortOrder
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    created_at?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    corpId?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutUserInput
    Option_count?: Option_countCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutUserInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
  }

  export type CorpCreateInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutCorpInput
    Option_count?: Option_countCreateNestedManyWithoutCorpInput
  }

  export type CorpUncheckedCreateInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountUncheckedCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutCorpInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutCorpInput
  }

  export type CorpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUpdateManyWithoutCorpNestedInput
  }

  export type CorpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUncheckedUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutCorpNestedInput
  }

  export type CorpCreateManyInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type CorpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CorpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Option_countCreateInput = {
    id?: string
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
    corp?: CorpCreateNestedOneWithoutOption_countInput
    user?: UserCreateNestedOneWithoutOption_countInput
  }

  export type Option_countUncheckedCreateInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type Option_countUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corp?: CorpUpdateOneWithoutOption_countNestedInput
    user?: UserUpdateOneWithoutOption_countNestedInput
  }

  export type Option_countUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Option_countCreateManyInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type Option_countUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Option_countUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Compare_corpCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    corp?: CorpCreateNestedOneWithoutCompare_corpInput
    user?: UserCreateNestedOneWithoutCompare_corpInput
  }

  export type Compare_corpUncheckedCreateInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Compare_corpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    corp?: CorpUpdateOneWithoutCompare_corpNestedInput
    user?: UserUpdateOneWithoutCompare_corpNestedInput
  }

  export type Compare_corpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Compare_corpCreateManyInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Compare_corpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Compare_corpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpCreateInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    corp?: CorpCreateNestedOneWithoutMy_compare_corpInput
    user?: UserCreateNestedOneWithoutMy_compare_corpInput
  }

  export type My_compare_corpUncheckedCreateInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    corp?: CorpUpdateOneWithoutMy_compare_corpNestedInput
    user?: UserUpdateOneWithoutMy_compare_corpNestedInput
  }

  export type My_compare_corpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpCreateManyInput = {
    id?: string
    userId?: string | null
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InvestmentCreateInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    account?: AccountCreateNestedOneWithoutInvestmentInput
  }

  export type InvestmentUncheckedCreateInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    accountId?: string | null
    id?: string
  }

  export type InvestmentUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    account?: AccountUpdateOneWithoutInvestmentNestedInput
  }

  export type InvestmentUncheckedUpdateInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type InvestmentCreateManyInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    accountId?: string | null
    id?: string
  }

  export type InvestmentUpdateManyMutationInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type InvestmentUncheckedUpdateManyInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    accountId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    corp?: CorpCreateNestedOneWithoutAccountInput
    user?: UserCreateNestedOneWithoutAccountInput
    Investment?: InvestmentCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    created_at?: Date | string
    updated_at?: Date | string
    corpId?: string | null
    id?: string
    userId?: string | null
    Investment?: InvestmentUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    corp?: CorpUpdateOneWithoutAccountNestedInput
    user?: UserUpdateOneWithoutAccountNestedInput
    Investment?: InvestmentUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    Investment?: InvestmentUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountCreateManyInput = {
    created_at?: Date | string
    updated_at?: Date | string
    corpId?: string | null
    id?: string
    userId?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AccountUncheckedUpdateManyInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type Compare_corpListRelationFilter = {
    every?: Compare_corpWhereInput
    some?: Compare_corpWhereInput
    none?: Compare_corpWhereInput
  }

  export type My_compare_corpListRelationFilter = {
    every?: My_compare_corpWhereInput
    some?: My_compare_corpWhereInput
    none?: My_compare_corpWhereInput
  }

  export type Option_countListRelationFilter = {
    every?: Option_countWhereInput
    some?: Option_countWhereInput
    none?: Option_countWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Compare_corpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type My_compare_corpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Option_countOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    birth?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    id?: SortOrder
    gender?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    birth?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    id?: SortOrder
    gender?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    birth?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    id?: SortOrder
    gender?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CorpCountOrderByAggregateInput = {
    id?: SortOrder
    corp_name?: SortOrder
    corp_tag?: SortOrder
    corp_profile?: SortOrder
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CorpAvgOrderByAggregateInput = {
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
  }

  export type CorpMaxOrderByAggregateInput = {
    id?: SortOrder
    corp_name?: SortOrder
    corp_tag?: SortOrder
    corp_profile?: SortOrder
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CorpMinOrderByAggregateInput = {
    id?: SortOrder
    corp_name?: SortOrder
    corp_tag?: SortOrder
    corp_profile?: SortOrder
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CorpSumOrderByAggregateInput = {
    total_investment?: SortOrder
    corp_sales?: SortOrder
    employee?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CorpNullableScalarRelationFilter = {
    is?: CorpWhereInput | null
    isNot?: CorpWhereInput | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type Option_countCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type Option_countAvgOrderByAggregateInput = {
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
  }

  export type Option_countMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type Option_countMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type Option_countSumOrderByAggregateInput = {
    my_compare_corp?: SortOrder
    compare_corp?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Compare_corpCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type Compare_corpMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type Compare_corpMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type My_compare_corpCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type My_compare_corpMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type My_compare_corpMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    corpId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
  }

  export type AccountNullableScalarRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type InvestmentCountOrderByAggregateInput = {
    amount?: SortOrder
    amount_comment?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    accountId?: SortOrder
    id?: SortOrder
  }

  export type InvestmentAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InvestmentMaxOrderByAggregateInput = {
    amount?: SortOrder
    amount_comment?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    accountId?: SortOrder
    id?: SortOrder
  }

  export type InvestmentMinOrderByAggregateInput = {
    amount?: SortOrder
    amount_comment?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isDeleted?: SortOrder
    accountId?: SortOrder
    id?: SortOrder
  }

  export type InvestmentSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type InvestmentListRelationFilter = {
    every?: InvestmentWhereInput
    some?: InvestmentWhereInput
    none?: InvestmentWhereInput
  }

  export type InvestmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    created_at?: SortOrder
    updated_at?: SortOrder
    corpId?: SortOrder
    id?: SortOrder
    userId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    created_at?: SortOrder
    updated_at?: SortOrder
    corpId?: SortOrder
    id?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    created_at?: SortOrder
    updated_at?: SortOrder
    corpId?: SortOrder
    id?: SortOrder
    userId?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type Compare_corpCreateNestedManyWithoutUserInput = {
    create?: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput> | Compare_corpCreateWithoutUserInput[] | Compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutUserInput | Compare_corpCreateOrConnectWithoutUserInput[]
    createMany?: Compare_corpCreateManyUserInputEnvelope
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
  }

  export type My_compare_corpCreateNestedManyWithoutUserInput = {
    create?: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput> | My_compare_corpCreateWithoutUserInput[] | My_compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutUserInput | My_compare_corpCreateOrConnectWithoutUserInput[]
    createMany?: My_compare_corpCreateManyUserInputEnvelope
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
  }

  export type Option_countCreateNestedManyWithoutUserInput = {
    create?: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput> | Option_countCreateWithoutUserInput[] | Option_countUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutUserInput | Option_countCreateOrConnectWithoutUserInput[]
    createMany?: Option_countCreateManyUserInputEnvelope
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type Compare_corpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput> | Compare_corpCreateWithoutUserInput[] | Compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutUserInput | Compare_corpCreateOrConnectWithoutUserInput[]
    createMany?: Compare_corpCreateManyUserInputEnvelope
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
  }

  export type My_compare_corpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput> | My_compare_corpCreateWithoutUserInput[] | My_compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutUserInput | My_compare_corpCreateOrConnectWithoutUserInput[]
    createMany?: My_compare_corpCreateManyUserInputEnvelope
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
  }

  export type Option_countUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput> | Option_countCreateWithoutUserInput[] | Option_countUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutUserInput | Option_countCreateOrConnectWithoutUserInput[]
    createMany?: Option_countCreateManyUserInputEnvelope
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type Compare_corpUpdateManyWithoutUserNestedInput = {
    create?: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput> | Compare_corpCreateWithoutUserInput[] | Compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutUserInput | Compare_corpCreateOrConnectWithoutUserInput[]
    upsert?: Compare_corpUpsertWithWhereUniqueWithoutUserInput | Compare_corpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Compare_corpCreateManyUserInputEnvelope
    set?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    disconnect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    delete?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    update?: Compare_corpUpdateWithWhereUniqueWithoutUserInput | Compare_corpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Compare_corpUpdateManyWithWhereWithoutUserInput | Compare_corpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
  }

  export type My_compare_corpUpdateManyWithoutUserNestedInput = {
    create?: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput> | My_compare_corpCreateWithoutUserInput[] | My_compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutUserInput | My_compare_corpCreateOrConnectWithoutUserInput[]
    upsert?: My_compare_corpUpsertWithWhereUniqueWithoutUserInput | My_compare_corpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: My_compare_corpCreateManyUserInputEnvelope
    set?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    disconnect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    delete?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    update?: My_compare_corpUpdateWithWhereUniqueWithoutUserInput | My_compare_corpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: My_compare_corpUpdateManyWithWhereWithoutUserInput | My_compare_corpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
  }

  export type Option_countUpdateManyWithoutUserNestedInput = {
    create?: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput> | Option_countCreateWithoutUserInput[] | Option_countUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutUserInput | Option_countCreateOrConnectWithoutUserInput[]
    upsert?: Option_countUpsertWithWhereUniqueWithoutUserInput | Option_countUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Option_countCreateManyUserInputEnvelope
    set?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    disconnect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    delete?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    update?: Option_countUpdateWithWhereUniqueWithoutUserInput | Option_countUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Option_countUpdateManyWithWhereWithoutUserInput | Option_countUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type Compare_corpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput> | Compare_corpCreateWithoutUserInput[] | Compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutUserInput | Compare_corpCreateOrConnectWithoutUserInput[]
    upsert?: Compare_corpUpsertWithWhereUniqueWithoutUserInput | Compare_corpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Compare_corpCreateManyUserInputEnvelope
    set?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    disconnect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    delete?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    update?: Compare_corpUpdateWithWhereUniqueWithoutUserInput | Compare_corpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Compare_corpUpdateManyWithWhereWithoutUserInput | Compare_corpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
  }

  export type My_compare_corpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput> | My_compare_corpCreateWithoutUserInput[] | My_compare_corpUncheckedCreateWithoutUserInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutUserInput | My_compare_corpCreateOrConnectWithoutUserInput[]
    upsert?: My_compare_corpUpsertWithWhereUniqueWithoutUserInput | My_compare_corpUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: My_compare_corpCreateManyUserInputEnvelope
    set?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    disconnect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    delete?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    update?: My_compare_corpUpdateWithWhereUniqueWithoutUserInput | My_compare_corpUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: My_compare_corpUpdateManyWithWhereWithoutUserInput | My_compare_corpUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
  }

  export type Option_countUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput> | Option_countCreateWithoutUserInput[] | Option_countUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutUserInput | Option_countCreateOrConnectWithoutUserInput[]
    upsert?: Option_countUpsertWithWhereUniqueWithoutUserInput | Option_countUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Option_countCreateManyUserInputEnvelope
    set?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    disconnect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    delete?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    update?: Option_countUpdateWithWhereUniqueWithoutUserInput | Option_countUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Option_countUpdateManyWithWhereWithoutUserInput | Option_countUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
  }

  export type AccountCreateNestedManyWithoutCorpInput = {
    create?: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput> | AccountCreateWithoutCorpInput[] | AccountUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCorpInput | AccountCreateOrConnectWithoutCorpInput[]
    createMany?: AccountCreateManyCorpInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type Compare_corpCreateNestedManyWithoutCorpInput = {
    create?: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput> | Compare_corpCreateWithoutCorpInput[] | Compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutCorpInput | Compare_corpCreateOrConnectWithoutCorpInput[]
    createMany?: Compare_corpCreateManyCorpInputEnvelope
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
  }

  export type My_compare_corpCreateNestedManyWithoutCorpInput = {
    create?: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput> | My_compare_corpCreateWithoutCorpInput[] | My_compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutCorpInput | My_compare_corpCreateOrConnectWithoutCorpInput[]
    createMany?: My_compare_corpCreateManyCorpInputEnvelope
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
  }

  export type Option_countCreateNestedManyWithoutCorpInput = {
    create?: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput> | Option_countCreateWithoutCorpInput[] | Option_countUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutCorpInput | Option_countCreateOrConnectWithoutCorpInput[]
    createMany?: Option_countCreateManyCorpInputEnvelope
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutCorpInput = {
    create?: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput> | AccountCreateWithoutCorpInput[] | AccountUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCorpInput | AccountCreateOrConnectWithoutCorpInput[]
    createMany?: AccountCreateManyCorpInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type Compare_corpUncheckedCreateNestedManyWithoutCorpInput = {
    create?: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput> | Compare_corpCreateWithoutCorpInput[] | Compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutCorpInput | Compare_corpCreateOrConnectWithoutCorpInput[]
    createMany?: Compare_corpCreateManyCorpInputEnvelope
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
  }

  export type My_compare_corpUncheckedCreateNestedManyWithoutCorpInput = {
    create?: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput> | My_compare_corpCreateWithoutCorpInput[] | My_compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutCorpInput | My_compare_corpCreateOrConnectWithoutCorpInput[]
    createMany?: My_compare_corpCreateManyCorpInputEnvelope
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
  }

  export type Option_countUncheckedCreateNestedManyWithoutCorpInput = {
    create?: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput> | Option_countCreateWithoutCorpInput[] | Option_countUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutCorpInput | Option_countCreateOrConnectWithoutCorpInput[]
    createMany?: Option_countCreateManyCorpInputEnvelope
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUpdateManyWithoutCorpNestedInput = {
    create?: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput> | AccountCreateWithoutCorpInput[] | AccountUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCorpInput | AccountCreateOrConnectWithoutCorpInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutCorpInput | AccountUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: AccountCreateManyCorpInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutCorpInput | AccountUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutCorpInput | AccountUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type Compare_corpUpdateManyWithoutCorpNestedInput = {
    create?: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput> | Compare_corpCreateWithoutCorpInput[] | Compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutCorpInput | Compare_corpCreateOrConnectWithoutCorpInput[]
    upsert?: Compare_corpUpsertWithWhereUniqueWithoutCorpInput | Compare_corpUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: Compare_corpCreateManyCorpInputEnvelope
    set?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    disconnect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    delete?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    update?: Compare_corpUpdateWithWhereUniqueWithoutCorpInput | Compare_corpUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: Compare_corpUpdateManyWithWhereWithoutCorpInput | Compare_corpUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
  }

  export type My_compare_corpUpdateManyWithoutCorpNestedInput = {
    create?: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput> | My_compare_corpCreateWithoutCorpInput[] | My_compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutCorpInput | My_compare_corpCreateOrConnectWithoutCorpInput[]
    upsert?: My_compare_corpUpsertWithWhereUniqueWithoutCorpInput | My_compare_corpUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: My_compare_corpCreateManyCorpInputEnvelope
    set?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    disconnect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    delete?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    update?: My_compare_corpUpdateWithWhereUniqueWithoutCorpInput | My_compare_corpUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: My_compare_corpUpdateManyWithWhereWithoutCorpInput | My_compare_corpUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
  }

  export type Option_countUpdateManyWithoutCorpNestedInput = {
    create?: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput> | Option_countCreateWithoutCorpInput[] | Option_countUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutCorpInput | Option_countCreateOrConnectWithoutCorpInput[]
    upsert?: Option_countUpsertWithWhereUniqueWithoutCorpInput | Option_countUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: Option_countCreateManyCorpInputEnvelope
    set?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    disconnect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    delete?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    update?: Option_countUpdateWithWhereUniqueWithoutCorpInput | Option_countUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: Option_countUpdateManyWithWhereWithoutCorpInput | Option_countUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutCorpNestedInput = {
    create?: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput> | AccountCreateWithoutCorpInput[] | AccountUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutCorpInput | AccountCreateOrConnectWithoutCorpInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutCorpInput | AccountUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: AccountCreateManyCorpInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutCorpInput | AccountUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutCorpInput | AccountUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type Compare_corpUncheckedUpdateManyWithoutCorpNestedInput = {
    create?: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput> | Compare_corpCreateWithoutCorpInput[] | Compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Compare_corpCreateOrConnectWithoutCorpInput | Compare_corpCreateOrConnectWithoutCorpInput[]
    upsert?: Compare_corpUpsertWithWhereUniqueWithoutCorpInput | Compare_corpUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: Compare_corpCreateManyCorpInputEnvelope
    set?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    disconnect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    delete?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    connect?: Compare_corpWhereUniqueInput | Compare_corpWhereUniqueInput[]
    update?: Compare_corpUpdateWithWhereUniqueWithoutCorpInput | Compare_corpUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: Compare_corpUpdateManyWithWhereWithoutCorpInput | Compare_corpUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
  }

  export type My_compare_corpUncheckedUpdateManyWithoutCorpNestedInput = {
    create?: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput> | My_compare_corpCreateWithoutCorpInput[] | My_compare_corpUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: My_compare_corpCreateOrConnectWithoutCorpInput | My_compare_corpCreateOrConnectWithoutCorpInput[]
    upsert?: My_compare_corpUpsertWithWhereUniqueWithoutCorpInput | My_compare_corpUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: My_compare_corpCreateManyCorpInputEnvelope
    set?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    disconnect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    delete?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    connect?: My_compare_corpWhereUniqueInput | My_compare_corpWhereUniqueInput[]
    update?: My_compare_corpUpdateWithWhereUniqueWithoutCorpInput | My_compare_corpUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: My_compare_corpUpdateManyWithWhereWithoutCorpInput | My_compare_corpUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
  }

  export type Option_countUncheckedUpdateManyWithoutCorpNestedInput = {
    create?: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput> | Option_countCreateWithoutCorpInput[] | Option_countUncheckedCreateWithoutCorpInput[]
    connectOrCreate?: Option_countCreateOrConnectWithoutCorpInput | Option_countCreateOrConnectWithoutCorpInput[]
    upsert?: Option_countUpsertWithWhereUniqueWithoutCorpInput | Option_countUpsertWithWhereUniqueWithoutCorpInput[]
    createMany?: Option_countCreateManyCorpInputEnvelope
    set?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    disconnect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    delete?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    connect?: Option_countWhereUniqueInput | Option_countWhereUniqueInput[]
    update?: Option_countUpdateWithWhereUniqueWithoutCorpInput | Option_countUpdateWithWhereUniqueWithoutCorpInput[]
    updateMany?: Option_countUpdateManyWithWhereWithoutCorpInput | Option_countUpdateManyWithWhereWithoutCorpInput[]
    deleteMany?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
  }

  export type CorpCreateNestedOneWithoutOption_countInput = {
    create?: XOR<CorpCreateWithoutOption_countInput, CorpUncheckedCreateWithoutOption_countInput>
    connectOrCreate?: CorpCreateOrConnectWithoutOption_countInput
    connect?: CorpWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOption_countInput = {
    create?: XOR<UserCreateWithoutOption_countInput, UserUncheckedCreateWithoutOption_countInput>
    connectOrCreate?: UserCreateOrConnectWithoutOption_countInput
    connect?: UserWhereUniqueInput
  }

  export type CorpUpdateOneWithoutOption_countNestedInput = {
    create?: XOR<CorpCreateWithoutOption_countInput, CorpUncheckedCreateWithoutOption_countInput>
    connectOrCreate?: CorpCreateOrConnectWithoutOption_countInput
    upsert?: CorpUpsertWithoutOption_countInput
    disconnect?: CorpWhereInput | boolean
    delete?: CorpWhereInput | boolean
    connect?: CorpWhereUniqueInput
    update?: XOR<XOR<CorpUpdateToOneWithWhereWithoutOption_countInput, CorpUpdateWithoutOption_countInput>, CorpUncheckedUpdateWithoutOption_countInput>
  }

  export type UserUpdateOneWithoutOption_countNestedInput = {
    create?: XOR<UserCreateWithoutOption_countInput, UserUncheckedCreateWithoutOption_countInput>
    connectOrCreate?: UserCreateOrConnectWithoutOption_countInput
    upsert?: UserUpsertWithoutOption_countInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOption_countInput, UserUpdateWithoutOption_countInput>, UserUncheckedUpdateWithoutOption_countInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CorpCreateNestedOneWithoutCompare_corpInput = {
    create?: XOR<CorpCreateWithoutCompare_corpInput, CorpUncheckedCreateWithoutCompare_corpInput>
    connectOrCreate?: CorpCreateOrConnectWithoutCompare_corpInput
    connect?: CorpWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCompare_corpInput = {
    create?: XOR<UserCreateWithoutCompare_corpInput, UserUncheckedCreateWithoutCompare_corpInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompare_corpInput
    connect?: UserWhereUniqueInput
  }

  export type CorpUpdateOneWithoutCompare_corpNestedInput = {
    create?: XOR<CorpCreateWithoutCompare_corpInput, CorpUncheckedCreateWithoutCompare_corpInput>
    connectOrCreate?: CorpCreateOrConnectWithoutCompare_corpInput
    upsert?: CorpUpsertWithoutCompare_corpInput
    disconnect?: CorpWhereInput | boolean
    delete?: CorpWhereInput | boolean
    connect?: CorpWhereUniqueInput
    update?: XOR<XOR<CorpUpdateToOneWithWhereWithoutCompare_corpInput, CorpUpdateWithoutCompare_corpInput>, CorpUncheckedUpdateWithoutCompare_corpInput>
  }

  export type UserUpdateOneWithoutCompare_corpNestedInput = {
    create?: XOR<UserCreateWithoutCompare_corpInput, UserUncheckedCreateWithoutCompare_corpInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompare_corpInput
    upsert?: UserUpsertWithoutCompare_corpInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompare_corpInput, UserUpdateWithoutCompare_corpInput>, UserUncheckedUpdateWithoutCompare_corpInput>
  }

  export type CorpCreateNestedOneWithoutMy_compare_corpInput = {
    create?: XOR<CorpCreateWithoutMy_compare_corpInput, CorpUncheckedCreateWithoutMy_compare_corpInput>
    connectOrCreate?: CorpCreateOrConnectWithoutMy_compare_corpInput
    connect?: CorpWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMy_compare_corpInput = {
    create?: XOR<UserCreateWithoutMy_compare_corpInput, UserUncheckedCreateWithoutMy_compare_corpInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_compare_corpInput
    connect?: UserWhereUniqueInput
  }

  export type CorpUpdateOneWithoutMy_compare_corpNestedInput = {
    create?: XOR<CorpCreateWithoutMy_compare_corpInput, CorpUncheckedCreateWithoutMy_compare_corpInput>
    connectOrCreate?: CorpCreateOrConnectWithoutMy_compare_corpInput
    upsert?: CorpUpsertWithoutMy_compare_corpInput
    disconnect?: CorpWhereInput | boolean
    delete?: CorpWhereInput | boolean
    connect?: CorpWhereUniqueInput
    update?: XOR<XOR<CorpUpdateToOneWithWhereWithoutMy_compare_corpInput, CorpUpdateWithoutMy_compare_corpInput>, CorpUncheckedUpdateWithoutMy_compare_corpInput>
  }

  export type UserUpdateOneWithoutMy_compare_corpNestedInput = {
    create?: XOR<UserCreateWithoutMy_compare_corpInput, UserUncheckedCreateWithoutMy_compare_corpInput>
    connectOrCreate?: UserCreateOrConnectWithoutMy_compare_corpInput
    upsert?: UserUpsertWithoutMy_compare_corpInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMy_compare_corpInput, UserUpdateWithoutMy_compare_corpInput>, UserUncheckedUpdateWithoutMy_compare_corpInput>
  }

  export type AccountCreateNestedOneWithoutInvestmentInput = {
    create?: XOR<AccountCreateWithoutInvestmentInput, AccountUncheckedCreateWithoutInvestmentInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInvestmentInput
    connect?: AccountWhereUniqueInput
  }

  export type AccountUpdateOneWithoutInvestmentNestedInput = {
    create?: XOR<AccountCreateWithoutInvestmentInput, AccountUncheckedCreateWithoutInvestmentInput>
    connectOrCreate?: AccountCreateOrConnectWithoutInvestmentInput
    upsert?: AccountUpsertWithoutInvestmentInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutInvestmentInput, AccountUpdateWithoutInvestmentInput>, AccountUncheckedUpdateWithoutInvestmentInput>
  }

  export type CorpCreateNestedOneWithoutAccountInput = {
    create?: XOR<CorpCreateWithoutAccountInput, CorpUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CorpCreateOrConnectWithoutAccountInput
    connect?: CorpWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    connect?: UserWhereUniqueInput
  }

  export type InvestmentCreateNestedManyWithoutAccountInput = {
    create?: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput> | InvestmentCreateWithoutAccountInput[] | InvestmentUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutAccountInput | InvestmentCreateOrConnectWithoutAccountInput[]
    createMany?: InvestmentCreateManyAccountInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type InvestmentUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput> | InvestmentCreateWithoutAccountInput[] | InvestmentUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutAccountInput | InvestmentCreateOrConnectWithoutAccountInput[]
    createMany?: InvestmentCreateManyAccountInputEnvelope
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
  }

  export type CorpUpdateOneWithoutAccountNestedInput = {
    create?: XOR<CorpCreateWithoutAccountInput, CorpUncheckedCreateWithoutAccountInput>
    connectOrCreate?: CorpCreateOrConnectWithoutAccountInput
    upsert?: CorpUpsertWithoutAccountInput
    disconnect?: CorpWhereInput | boolean
    delete?: CorpWhereInput | boolean
    connect?: CorpWhereUniqueInput
    update?: XOR<XOR<CorpUpdateToOneWithWhereWithoutAccountInput, CorpUpdateWithoutAccountInput>, CorpUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateOneWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput
    upsert?: UserUpsertWithoutAccountInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountInput, UserUpdateWithoutAccountInput>, UserUncheckedUpdateWithoutAccountInput>
  }

  export type InvestmentUpdateManyWithoutAccountNestedInput = {
    create?: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput> | InvestmentCreateWithoutAccountInput[] | InvestmentUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutAccountInput | InvestmentCreateOrConnectWithoutAccountInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutAccountInput | InvestmentUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: InvestmentCreateManyAccountInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutAccountInput | InvestmentUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutAccountInput | InvestmentUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type InvestmentUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput> | InvestmentCreateWithoutAccountInput[] | InvestmentUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: InvestmentCreateOrConnectWithoutAccountInput | InvestmentCreateOrConnectWithoutAccountInput[]
    upsert?: InvestmentUpsertWithWhereUniqueWithoutAccountInput | InvestmentUpsertWithWhereUniqueWithoutAccountInput[]
    createMany?: InvestmentCreateManyAccountInputEnvelope
    set?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    disconnect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    delete?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    connect?: InvestmentWhereUniqueInput | InvestmentWhereUniqueInput[]
    update?: InvestmentUpdateWithWhereUniqueWithoutAccountInput | InvestmentUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: InvestmentUpdateManyWithWhereWithoutAccountInput | InvestmentUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AccountCreateWithoutUserInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    corp?: CorpCreateNestedOneWithoutAccountInput
    Investment?: InvestmentCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    created_at?: Date | string
    updated_at?: Date | string
    corpId?: string | null
    id?: string
    Investment?: InvestmentUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Compare_corpCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    corp?: CorpCreateNestedOneWithoutCompare_corpInput
  }

  export type Compare_corpUncheckedCreateWithoutUserInput = {
    id?: string
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Compare_corpCreateOrConnectWithoutUserInput = {
    where: Compare_corpWhereUniqueInput
    create: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput>
  }

  export type Compare_corpCreateManyUserInputEnvelope = {
    data: Compare_corpCreateManyUserInput | Compare_corpCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type My_compare_corpCreateWithoutUserInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    corp?: CorpCreateNestedOneWithoutMy_compare_corpInput
  }

  export type My_compare_corpUncheckedCreateWithoutUserInput = {
    id?: string
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpCreateOrConnectWithoutUserInput = {
    where: My_compare_corpWhereUniqueInput
    create: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput>
  }

  export type My_compare_corpCreateManyUserInputEnvelope = {
    data: My_compare_corpCreateManyUserInput | My_compare_corpCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type Option_countCreateWithoutUserInput = {
    id?: string
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
    corp?: CorpCreateNestedOneWithoutOption_countInput
  }

  export type Option_countUncheckedCreateWithoutUserInput = {
    id?: string
    corpId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type Option_countCreateOrConnectWithoutUserInput = {
    where: Option_countWhereUniqueInput
    create: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput>
  }

  export type Option_countCreateManyUserInputEnvelope = {
    data: Option_countCreateManyUserInput | Option_countCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    created_at?: DateTimeFilter<"Account"> | Date | string
    updated_at?: DateTimeFilter<"Account"> | Date | string
    corpId?: StringNullableFilter<"Account"> | string | null
    id?: StringFilter<"Account"> | string
    userId?: StringNullableFilter<"Account"> | string | null
  }

  export type Compare_corpUpsertWithWhereUniqueWithoutUserInput = {
    where: Compare_corpWhereUniqueInput
    update: XOR<Compare_corpUpdateWithoutUserInput, Compare_corpUncheckedUpdateWithoutUserInput>
    create: XOR<Compare_corpCreateWithoutUserInput, Compare_corpUncheckedCreateWithoutUserInput>
  }

  export type Compare_corpUpdateWithWhereUniqueWithoutUserInput = {
    where: Compare_corpWhereUniqueInput
    data: XOR<Compare_corpUpdateWithoutUserInput, Compare_corpUncheckedUpdateWithoutUserInput>
  }

  export type Compare_corpUpdateManyWithWhereWithoutUserInput = {
    where: Compare_corpScalarWhereInput
    data: XOR<Compare_corpUpdateManyMutationInput, Compare_corpUncheckedUpdateManyWithoutUserInput>
  }

  export type Compare_corpScalarWhereInput = {
    AND?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
    OR?: Compare_corpScalarWhereInput[]
    NOT?: Compare_corpScalarWhereInput | Compare_corpScalarWhereInput[]
    id?: StringFilter<"Compare_corp"> | string
    userId?: StringNullableFilter<"Compare_corp"> | string | null
    corpId?: StringNullableFilter<"Compare_corp"> | string | null
    created_at?: DateTimeFilter<"Compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"Compare_corp"> | Date | string
    isDeleted?: BoolFilter<"Compare_corp"> | boolean
  }

  export type My_compare_corpUpsertWithWhereUniqueWithoutUserInput = {
    where: My_compare_corpWhereUniqueInput
    update: XOR<My_compare_corpUpdateWithoutUserInput, My_compare_corpUncheckedUpdateWithoutUserInput>
    create: XOR<My_compare_corpCreateWithoutUserInput, My_compare_corpUncheckedCreateWithoutUserInput>
  }

  export type My_compare_corpUpdateWithWhereUniqueWithoutUserInput = {
    where: My_compare_corpWhereUniqueInput
    data: XOR<My_compare_corpUpdateWithoutUserInput, My_compare_corpUncheckedUpdateWithoutUserInput>
  }

  export type My_compare_corpUpdateManyWithWhereWithoutUserInput = {
    where: My_compare_corpScalarWhereInput
    data: XOR<My_compare_corpUpdateManyMutationInput, My_compare_corpUncheckedUpdateManyWithoutUserInput>
  }

  export type My_compare_corpScalarWhereInput = {
    AND?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
    OR?: My_compare_corpScalarWhereInput[]
    NOT?: My_compare_corpScalarWhereInput | My_compare_corpScalarWhereInput[]
    id?: StringFilter<"My_compare_corp"> | string
    userId?: StringNullableFilter<"My_compare_corp"> | string | null
    corpId?: StringNullableFilter<"My_compare_corp"> | string | null
    created_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    updated_at?: DateTimeFilter<"My_compare_corp"> | Date | string
    isDeleted?: BoolFilter<"My_compare_corp"> | boolean
  }

  export type Option_countUpsertWithWhereUniqueWithoutUserInput = {
    where: Option_countWhereUniqueInput
    update: XOR<Option_countUpdateWithoutUserInput, Option_countUncheckedUpdateWithoutUserInput>
    create: XOR<Option_countCreateWithoutUserInput, Option_countUncheckedCreateWithoutUserInput>
  }

  export type Option_countUpdateWithWhereUniqueWithoutUserInput = {
    where: Option_countWhereUniqueInput
    data: XOR<Option_countUpdateWithoutUserInput, Option_countUncheckedUpdateWithoutUserInput>
  }

  export type Option_countUpdateManyWithWhereWithoutUserInput = {
    where: Option_countScalarWhereInput
    data: XOR<Option_countUpdateManyMutationInput, Option_countUncheckedUpdateManyWithoutUserInput>
  }

  export type Option_countScalarWhereInput = {
    AND?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
    OR?: Option_countScalarWhereInput[]
    NOT?: Option_countScalarWhereInput | Option_countScalarWhereInput[]
    id?: StringFilter<"Option_count"> | string
    userId?: StringNullableFilter<"Option_count"> | string | null
    corpId?: StringNullableFilter<"Option_count"> | string | null
    my_compare_corp?: IntFilter<"Option_count"> | number
    compare_corp?: IntFilter<"Option_count"> | number
    created_at?: DateTimeFilter<"Option_count"> | Date | string
    updated_at?: DateTimeFilter<"Option_count"> | Date | string
  }

  export type AccountCreateWithoutCorpInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    user?: UserCreateNestedOneWithoutAccountInput
    Investment?: InvestmentCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutCorpInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    userId?: string | null
    Investment?: InvestmentUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountCreateOrConnectWithoutCorpInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput>
  }

  export type AccountCreateManyCorpInputEnvelope = {
    data: AccountCreateManyCorpInput | AccountCreateManyCorpInput[]
    skipDuplicates?: boolean
  }

  export type Compare_corpCreateWithoutCorpInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutCompare_corpInput
  }

  export type Compare_corpUncheckedCreateWithoutCorpInput = {
    id?: string
    userId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Compare_corpCreateOrConnectWithoutCorpInput = {
    where: Compare_corpWhereUniqueInput
    create: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput>
  }

  export type Compare_corpCreateManyCorpInputEnvelope = {
    data: Compare_corpCreateManyCorpInput | Compare_corpCreateManyCorpInput[]
    skipDuplicates?: boolean
  }

  export type My_compare_corpCreateWithoutCorpInput = {
    id?: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    user?: UserCreateNestedOneWithoutMy_compare_corpInput
  }

  export type My_compare_corpUncheckedCreateWithoutCorpInput = {
    id?: string
    userId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpCreateOrConnectWithoutCorpInput = {
    where: My_compare_corpWhereUniqueInput
    create: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput>
  }

  export type My_compare_corpCreateManyCorpInputEnvelope = {
    data: My_compare_corpCreateManyCorpInput | My_compare_corpCreateManyCorpInput[]
    skipDuplicates?: boolean
  }

  export type Option_countCreateWithoutCorpInput = {
    id?: string
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
    user?: UserCreateNestedOneWithoutOption_countInput
  }

  export type Option_countUncheckedCreateWithoutCorpInput = {
    id?: string
    userId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type Option_countCreateOrConnectWithoutCorpInput = {
    where: Option_countWhereUniqueInput
    create: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput>
  }

  export type Option_countCreateManyCorpInputEnvelope = {
    data: Option_countCreateManyCorpInput | Option_countCreateManyCorpInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutCorpInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutCorpInput, AccountUncheckedUpdateWithoutCorpInput>
    create: XOR<AccountCreateWithoutCorpInput, AccountUncheckedCreateWithoutCorpInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutCorpInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutCorpInput, AccountUncheckedUpdateWithoutCorpInput>
  }

  export type AccountUpdateManyWithWhereWithoutCorpInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutCorpInput>
  }

  export type Compare_corpUpsertWithWhereUniqueWithoutCorpInput = {
    where: Compare_corpWhereUniqueInput
    update: XOR<Compare_corpUpdateWithoutCorpInput, Compare_corpUncheckedUpdateWithoutCorpInput>
    create: XOR<Compare_corpCreateWithoutCorpInput, Compare_corpUncheckedCreateWithoutCorpInput>
  }

  export type Compare_corpUpdateWithWhereUniqueWithoutCorpInput = {
    where: Compare_corpWhereUniqueInput
    data: XOR<Compare_corpUpdateWithoutCorpInput, Compare_corpUncheckedUpdateWithoutCorpInput>
  }

  export type Compare_corpUpdateManyWithWhereWithoutCorpInput = {
    where: Compare_corpScalarWhereInput
    data: XOR<Compare_corpUpdateManyMutationInput, Compare_corpUncheckedUpdateManyWithoutCorpInput>
  }

  export type My_compare_corpUpsertWithWhereUniqueWithoutCorpInput = {
    where: My_compare_corpWhereUniqueInput
    update: XOR<My_compare_corpUpdateWithoutCorpInput, My_compare_corpUncheckedUpdateWithoutCorpInput>
    create: XOR<My_compare_corpCreateWithoutCorpInput, My_compare_corpUncheckedCreateWithoutCorpInput>
  }

  export type My_compare_corpUpdateWithWhereUniqueWithoutCorpInput = {
    where: My_compare_corpWhereUniqueInput
    data: XOR<My_compare_corpUpdateWithoutCorpInput, My_compare_corpUncheckedUpdateWithoutCorpInput>
  }

  export type My_compare_corpUpdateManyWithWhereWithoutCorpInput = {
    where: My_compare_corpScalarWhereInput
    data: XOR<My_compare_corpUpdateManyMutationInput, My_compare_corpUncheckedUpdateManyWithoutCorpInput>
  }

  export type Option_countUpsertWithWhereUniqueWithoutCorpInput = {
    where: Option_countWhereUniqueInput
    update: XOR<Option_countUpdateWithoutCorpInput, Option_countUncheckedUpdateWithoutCorpInput>
    create: XOR<Option_countCreateWithoutCorpInput, Option_countUncheckedCreateWithoutCorpInput>
  }

  export type Option_countUpdateWithWhereUniqueWithoutCorpInput = {
    where: Option_countWhereUniqueInput
    data: XOR<Option_countUpdateWithoutCorpInput, Option_countUncheckedUpdateWithoutCorpInput>
  }

  export type Option_countUpdateManyWithWhereWithoutCorpInput = {
    where: Option_countScalarWhereInput
    data: XOR<Option_countUpdateManyMutationInput, Option_countUncheckedUpdateManyWithoutCorpInput>
  }

  export type CorpCreateWithoutOption_countInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutCorpInput
  }

  export type CorpUncheckedCreateWithoutOption_countInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountUncheckedCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutCorpInput
  }

  export type CorpCreateOrConnectWithoutOption_countInput = {
    where: CorpWhereUniqueInput
    create: XOR<CorpCreateWithoutOption_countInput, CorpUncheckedCreateWithoutOption_countInput>
  }

  export type UserCreateWithoutOption_countInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOption_countInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOption_countInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOption_countInput, UserUncheckedCreateWithoutOption_countInput>
  }

  export type CorpUpsertWithoutOption_countInput = {
    update: XOR<CorpUpdateWithoutOption_countInput, CorpUncheckedUpdateWithoutOption_countInput>
    create: XOR<CorpCreateWithoutOption_countInput, CorpUncheckedCreateWithoutOption_countInput>
    where?: CorpWhereInput
  }

  export type CorpUpdateToOneWithWhereWithoutOption_countInput = {
    where?: CorpWhereInput
    data: XOR<CorpUpdateWithoutOption_countInput, CorpUncheckedUpdateWithoutOption_countInput>
  }

  export type CorpUpdateWithoutOption_countInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutCorpNestedInput
  }

  export type CorpUncheckedUpdateWithoutOption_countInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUncheckedUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutCorpNestedInput
  }

  export type UserUpsertWithoutOption_countInput = {
    update: XOR<UserUpdateWithoutOption_countInput, UserUncheckedUpdateWithoutOption_countInput>
    create: XOR<UserCreateWithoutOption_countInput, UserUncheckedCreateWithoutOption_countInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOption_countInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOption_countInput, UserUncheckedUpdateWithoutOption_countInput>
  }

  export type UserUpdateWithoutOption_countInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOption_countInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CorpCreateWithoutCompare_corpInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutCorpInput
    Option_count?: Option_countCreateNestedManyWithoutCorpInput
  }

  export type CorpUncheckedCreateWithoutCompare_corpInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountUncheckedCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutCorpInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutCorpInput
  }

  export type CorpCreateOrConnectWithoutCompare_corpInput = {
    where: CorpWhereUniqueInput
    create: XOR<CorpCreateWithoutCompare_corpInput, CorpUncheckedCreateWithoutCompare_corpInput>
  }

  export type UserCreateWithoutCompare_corpInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutUserInput
    Option_count?: Option_countCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompare_corpInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutUserInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompare_corpInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompare_corpInput, UserUncheckedCreateWithoutCompare_corpInput>
  }

  export type CorpUpsertWithoutCompare_corpInput = {
    update: XOR<CorpUpdateWithoutCompare_corpInput, CorpUncheckedUpdateWithoutCompare_corpInput>
    create: XOR<CorpCreateWithoutCompare_corpInput, CorpUncheckedCreateWithoutCompare_corpInput>
    where?: CorpWhereInput
  }

  export type CorpUpdateToOneWithWhereWithoutCompare_corpInput = {
    where?: CorpWhereInput
    data: XOR<CorpUpdateWithoutCompare_corpInput, CorpUncheckedUpdateWithoutCompare_corpInput>
  }

  export type CorpUpdateWithoutCompare_corpInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUpdateManyWithoutCorpNestedInput
  }

  export type CorpUncheckedUpdateWithoutCompare_corpInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUncheckedUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutCorpNestedInput
  }

  export type UserUpsertWithoutCompare_corpInput = {
    update: XOR<UserUpdateWithoutCompare_corpInput, UserUncheckedUpdateWithoutCompare_corpInput>
    create: XOR<UserCreateWithoutCompare_corpInput, UserUncheckedCreateWithoutCompare_corpInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompare_corpInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompare_corpInput, UserUncheckedUpdateWithoutCompare_corpInput>
  }

  export type UserUpdateWithoutCompare_corpInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompare_corpInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CorpCreateWithoutMy_compare_corpInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutCorpInput
    Option_count?: Option_countCreateNestedManyWithoutCorpInput
  }

  export type CorpUncheckedCreateWithoutMy_compare_corpInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Account?: AccountUncheckedCreateNestedManyWithoutCorpInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutCorpInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutCorpInput
  }

  export type CorpCreateOrConnectWithoutMy_compare_corpInput = {
    where: CorpWhereUniqueInput
    create: XOR<CorpCreateWithoutMy_compare_corpInput, CorpUncheckedCreateWithoutMy_compare_corpInput>
  }

  export type UserCreateWithoutMy_compare_corpInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpCreateNestedManyWithoutUserInput
    Option_count?: Option_countCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMy_compare_corpInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Account?: AccountUncheckedCreateNestedManyWithoutUserInput
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutUserInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMy_compare_corpInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMy_compare_corpInput, UserUncheckedCreateWithoutMy_compare_corpInput>
  }

  export type CorpUpsertWithoutMy_compare_corpInput = {
    update: XOR<CorpUpdateWithoutMy_compare_corpInput, CorpUncheckedUpdateWithoutMy_compare_corpInput>
    create: XOR<CorpCreateWithoutMy_compare_corpInput, CorpUncheckedCreateWithoutMy_compare_corpInput>
    where?: CorpWhereInput
  }

  export type CorpUpdateToOneWithWhereWithoutMy_compare_corpInput = {
    where?: CorpWhereInput
    data: XOR<CorpUpdateWithoutMy_compare_corpInput, CorpUncheckedUpdateWithoutMy_compare_corpInput>
  }

  export type CorpUpdateWithoutMy_compare_corpInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUpdateManyWithoutCorpNestedInput
  }

  export type CorpUncheckedUpdateWithoutMy_compare_corpInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Account?: AccountUncheckedUpdateManyWithoutCorpNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutCorpNestedInput
  }

  export type UserUpsertWithoutMy_compare_corpInput = {
    update: XOR<UserUpdateWithoutMy_compare_corpInput, UserUncheckedUpdateWithoutMy_compare_corpInput>
    create: XOR<UserCreateWithoutMy_compare_corpInput, UserUncheckedCreateWithoutMy_compare_corpInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMy_compare_corpInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMy_compare_corpInput, UserUncheckedUpdateWithoutMy_compare_corpInput>
  }

  export type UserUpdateWithoutMy_compare_corpInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMy_compare_corpInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Account?: AccountUncheckedUpdateManyWithoutUserNestedInput
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutInvestmentInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    corp?: CorpCreateNestedOneWithoutAccountInput
    user?: UserCreateNestedOneWithoutAccountInput
  }

  export type AccountUncheckedCreateWithoutInvestmentInput = {
    created_at?: Date | string
    updated_at?: Date | string
    corpId?: string | null
    id?: string
    userId?: string | null
  }

  export type AccountCreateOrConnectWithoutInvestmentInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutInvestmentInput, AccountUncheckedCreateWithoutInvestmentInput>
  }

  export type AccountUpsertWithoutInvestmentInput = {
    update: XOR<AccountUpdateWithoutInvestmentInput, AccountUncheckedUpdateWithoutInvestmentInput>
    create: XOR<AccountCreateWithoutInvestmentInput, AccountUncheckedCreateWithoutInvestmentInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutInvestmentInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutInvestmentInput, AccountUncheckedUpdateWithoutInvestmentInput>
  }

  export type AccountUpdateWithoutInvestmentInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    corp?: CorpUpdateOneWithoutAccountNestedInput
    user?: UserUpdateOneWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutInvestmentInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorpCreateWithoutAccountInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Compare_corp?: Compare_corpCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutCorpInput
    Option_count?: Option_countCreateNestedManyWithoutCorpInput
  }

  export type CorpUncheckedCreateWithoutAccountInput = {
    id?: string
    corp_name: string
    corp_tag: string
    corp_profile: string
    total_investment?: bigint | number
    corp_sales?: bigint | number
    employee: number
    created_at?: Date | string
    updated_at?: Date | string
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutCorpInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutCorpInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutCorpInput
  }

  export type CorpCreateOrConnectWithoutAccountInput = {
    where: CorpWhereUniqueInput
    create: XOR<CorpCreateWithoutAccountInput, CorpUncheckedCreateWithoutAccountInput>
  }

  export type UserCreateWithoutAccountInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Compare_corp?: Compare_corpCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpCreateNestedManyWithoutUserInput
    Option_count?: Option_countCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    name: string
    email: string
    password: string
    birth: Date | string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
    gender: $Enums.Gender
    Compare_corp?: Compare_corpUncheckedCreateNestedManyWithoutUserInput
    My_compare_corp?: My_compare_corpUncheckedCreateNestedManyWithoutUserInput
    Option_count?: Option_countUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type InvestmentCreateWithoutAccountInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
  }

  export type InvestmentUncheckedCreateWithoutAccountInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
  }

  export type InvestmentCreateOrConnectWithoutAccountInput = {
    where: InvestmentWhereUniqueInput
    create: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput>
  }

  export type InvestmentCreateManyAccountInputEnvelope = {
    data: InvestmentCreateManyAccountInput | InvestmentCreateManyAccountInput[]
    skipDuplicates?: boolean
  }

  export type CorpUpsertWithoutAccountInput = {
    update: XOR<CorpUpdateWithoutAccountInput, CorpUncheckedUpdateWithoutAccountInput>
    create: XOR<CorpCreateWithoutAccountInput, CorpUncheckedCreateWithoutAccountInput>
    where?: CorpWhereInput
  }

  export type CorpUpdateToOneWithWhereWithoutAccountInput = {
    where?: CorpWhereInput
    data: XOR<CorpUpdateWithoutAccountInput, CorpUncheckedUpdateWithoutAccountInput>
  }

  export type CorpUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Compare_corp?: Compare_corpUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUpdateManyWithoutCorpNestedInput
  }

  export type CorpUncheckedUpdateWithoutAccountInput = {
    id?: StringFieldUpdateOperationsInput | string
    corp_name?: StringFieldUpdateOperationsInput | string
    corp_tag?: StringFieldUpdateOperationsInput | string
    corp_profile?: StringFieldUpdateOperationsInput | string
    total_investment?: BigIntFieldUpdateOperationsInput | bigint | number
    corp_sales?: BigIntFieldUpdateOperationsInput | bigint | number
    employee?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutCorpNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutCorpNestedInput
  }

  export type UserUpsertWithoutAccountInput = {
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateWithoutAccountInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Compare_corp?: Compare_corpUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    birth?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    Compare_corp?: Compare_corpUncheckedUpdateManyWithoutUserNestedInput
    My_compare_corp?: My_compare_corpUncheckedUpdateManyWithoutUserNestedInput
    Option_count?: Option_countUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InvestmentUpsertWithWhereUniqueWithoutAccountInput = {
    where: InvestmentWhereUniqueInput
    update: XOR<InvestmentUpdateWithoutAccountInput, InvestmentUncheckedUpdateWithoutAccountInput>
    create: XOR<InvestmentCreateWithoutAccountInput, InvestmentUncheckedCreateWithoutAccountInput>
  }

  export type InvestmentUpdateWithWhereUniqueWithoutAccountInput = {
    where: InvestmentWhereUniqueInput
    data: XOR<InvestmentUpdateWithoutAccountInput, InvestmentUncheckedUpdateWithoutAccountInput>
  }

  export type InvestmentUpdateManyWithWhereWithoutAccountInput = {
    where: InvestmentScalarWhereInput
    data: XOR<InvestmentUpdateManyMutationInput, InvestmentUncheckedUpdateManyWithoutAccountInput>
  }

  export type InvestmentScalarWhereInput = {
    AND?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
    OR?: InvestmentScalarWhereInput[]
    NOT?: InvestmentScalarWhereInput | InvestmentScalarWhereInput[]
    amount?: IntFilter<"Investment"> | number
    amount_comment?: StringFilter<"Investment"> | string
    created_at?: DateTimeFilter<"Investment"> | Date | string
    updated_at?: DateTimeFilter<"Investment"> | Date | string
    isDeleted?: BoolFilter<"Investment"> | boolean
    accountId?: StringNullableFilter<"Investment"> | string | null
    id?: StringFilter<"Investment"> | string
  }

  export type AccountCreateManyUserInput = {
    created_at?: Date | string
    updated_at?: Date | string
    corpId?: string | null
    id?: string
  }

  export type Compare_corpCreateManyUserInput = {
    id?: string
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpCreateManyUserInput = {
    id?: string
    corpId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Option_countCreateManyUserInput = {
    id?: string
    corpId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    corp?: CorpUpdateOneWithoutAccountNestedInput
    Investment?: InvestmentUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
    Investment?: InvestmentUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    id?: StringFieldUpdateOperationsInput | string
  }

  export type Compare_corpUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    corp?: CorpUpdateOneWithoutCompare_corpNestedInput
  }

  export type Compare_corpUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Compare_corpUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    corp?: CorpUpdateOneWithoutMy_compare_corpNestedInput
  }

  export type My_compare_corpUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Option_countUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    corp?: CorpUpdateOneWithoutOption_countNestedInput
  }

  export type Option_countUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Option_countUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    corpId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyCorpInput = {
    created_at?: Date | string
    updated_at?: Date | string
    id?: string
    userId?: string | null
  }

  export type Compare_corpCreateManyCorpInput = {
    id?: string
    userId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type My_compare_corpCreateManyCorpInput = {
    id?: string
    userId?: string | null
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
  }

  export type Option_countCreateManyCorpInput = {
    id?: string
    userId?: string | null
    my_compare_corp?: number
    compare_corp?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AccountUpdateWithoutCorpInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAccountNestedInput
    Investment?: InvestmentUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateWithoutCorpInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    Investment?: InvestmentUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateManyWithoutCorpInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Compare_corpUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutCompare_corpNestedInput
  }

  export type Compare_corpUncheckedUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Compare_corpUncheckedUpdateManyWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneWithoutMy_compare_corpNestedInput
  }

  export type My_compare_corpUncheckedUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type My_compare_corpUncheckedUpdateManyWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type Option_countUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutOption_countNestedInput
  }

  export type Option_countUncheckedUpdateWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Option_countUncheckedUpdateManyWithoutCorpInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    my_compare_corp?: IntFieldUpdateOperationsInput | number
    compare_corp?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InvestmentCreateManyAccountInput = {
    amount: number
    amount_comment: string
    created_at?: Date | string
    updated_at?: Date | string
    isDeleted?: boolean
    id?: string
  }

  export type InvestmentUpdateWithoutAccountInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type InvestmentUncheckedUpdateWithoutAccountInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }

  export type InvestmentUncheckedUpdateManyWithoutAccountInput = {
    amount?: IntFieldUpdateOperationsInput | number
    amount_comment?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}